/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {105,110}, {97,114}, {115,32}, {100,32}, {116,105}, {101,114}, {37,115}, {101,110}, {97,108}, {135,130}, {34,137}, {141,34}, {110,111},
  {117,110}, {114,101}, {97,110}, {121,32}, {115,105}, {111,114}, {97,116}, {109,98}, {32,142}, {115,116}, {100,101}, {143,129}, {109,138}, {41,10}, {101,134}, {98,108},
  {140,32}, {111,108}, {114,97}, {144,99}, {116,104}, {102,163}, {118,139}, {97,32}, {115,121}, {168,151}, {169,161}, {117,115}, {136,32}, {149,32}, {132,162}, {103,32},
  {103,117}, {105,134}, {115,148}, {97,159}, {176,156}, {132,180}, {99,104}, {101,120}, {166,177}, {111,102}, {102,131}, {165,160}, {131,184}, {101,100}, {101,133}, {105,133},
  {170,152}, {118,132}, {185,32}, {105,179}, {193,195}, {116,111}, {115,10}, {174,147}, {109,97}, {109,101}, {98,128}, {99,130}, {171,129}, {181,129}, {112,145}, {109,204},
  {104,97}, {116,97}, {132,97}, {153,150}, {44,32}, {130,32}, {154,186}, {102,105}, {152,10}, {101,10}, {99,146}, {109,150}, {192,157}, {40,220}, {100,105}, {117,108},
  {99,111}, {196,128}, {218,155}, {34,32}, {139,32}, {119,105}, {97,115}, {148,122}, {116,136}, {110,32}, {131,32}, {146,32}, {98,101}, {108,111}, {111,112}, {118,128},
  {203,153}, {131,175}, {219,182}, {58,216}, {100,111}, {109,112}, {108,128}, {238,136}, {165,140}, {240,146}, {102,149}, {164,32}, {209,175}, {206,178}, {207,202}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new declarations\n",
/*099*/  "member \"%s\" appears more than once in struct \"%s\"\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "UNUSED\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined as a %s\n",
/*111*/  "expected identifier - did you forget a type?\n",
#else
  "\267pect\236\305k\212:\230\324bu\201fo\220\206\216\012",
  "\202l\223\247s\203g\366\323e\234\201(\255\267\375\202) \332 f\241\355w ea\266 \042c\346e\042\012",
  "\232cl\322\240\302\247\355c\344\341\317appe\204 \352\247\340\365o\220\206\237ock\012",
  "\370\230 \277\233i\365le\234t\275\012",
  "\273\310\223\233\320\357\265t\306",
  "\376a\262gn\236\305 \353\256y\012",
  "\367\226\255\342\312\221\326\275\012",
  "\376\247\371\201\267\375\202; \346sum\236z\210o\012",
  "\274\307\347\200(nega\207ve\324z\210o \255ou\201\302bo\220ds\235",
  "\274\273\255\232cl\322\214\012",
  "\274out\224d\200\370\306",
  "\274\273c\213l\324\233\247\270add\221s\306",
  "\217 \212tr\223po\203\201(\217 pu\237ic \370s\235",
  "\274\323e\234t; \233\352s\345t\266\012",
  "\042\232fa\337t\343c\346\200\376\244\200l\346\201c\346\200\352s\345t\266 \323e\234t\012",
  "m\337\207p\366\232fa\337t\205\352\042s\345t\266\042\012",
  "\220\326\236\300\012",
  "\203i\207\213iza\240d\226\247\267ce\275\205\232cl\204\236\347\331",
  "\233\247la\354l\363",
  "\274\252 nam\200\216\012",
  "\252 \213\221ad\223\326\275\363",
  "\376l\246u\200(n\202-\371t\235",
  "\307a\262gn\234\201\376\224\365\366a\262gn\234t\012",
  "\042b\221ak\343\255\042\313t\203ue\343\277ou\201\302\313t\267t\012",
  "\273head\361\336ff\210\205from pro\305typ\331",
  "\217 \362\361\042#if...\042\012",
  "\274\266\322ct\254\371t\012",
  "\274subscrip\201(\233\353\307\255\305o m\222\223subscripts)\363",
  "\274\267\375\202\324\346sum\236z\210o\012",
  "\340\365o\220\206\323e\234\201\233c\355s\236a\201\244\200\212\206\302\327\366(\231\204t\236a\201l\203\200%d\235",
  "\220k\217w\351\336\221c\207v\331",
  "\307\203\232x ou\201\302bo\220d\205(\341\216\235",
  "\307\376\203\232x\236(\341\216\235",
  "\315\364\276\233\320\357\247\232fa\337\201\246u\200(\315%d\235",
  "\315typ\200mis\362 (\315%d\235",
  "e\365t\223\323e\234t\012",
  "\274\231r\361(po\262\237\223n\202-\350m\203\226\236\231r\203g\235",
  "\267t\242 \266\322c\350\205\325l\203\331",
  "\371\201\252 \320\205\217 \347\331",
  "duplic\226\200\042c\346e\343la\354l (\246u\200%d\235",
  "\274ellip\224s\324\307\347\200\277\233k\217wn\012",
  "\274\340\227\203a\240\302cl\346\205speci\327\210\306",
  "\266\322ct\254\371\201\267ce\275\205r\222g\200f\255pack\236\231r\203g\012",
  "po\224\214\344p\322\311\350\205\317\316c\275\200\213l nam\236p\322\311\350\306",
  "\305o m\222\223\273\265t\306",
  "\220k\217w\351\307\347\200(\341\216\235",
  "\307\347\276\364 \233\362\324\255\232\231\203a\240\307\277\305o sm\213l\012",
  "\307(\205\364 \233\362\012",
  "\274l\203\200\313t\203ua\214\012",
  "\274r\222g\331",
  "\274subscript\324\253\200\042[ ]\343\367\226\225\205\325\310j\255\336\234\224\202\306",
  "m\337\207-\336\234\224\202\344\256y\205\376f\337l\223\203i\207\213iz\275\012",
  "\267ce\275\361\310ximum nu\227\254\302\336\234\224\202\306",
  "\220\362\236c\355s\361b\242c\200(\042}\042\235",
  "\231\204\201\302\273bod\223\345\244ou\201\273head\210\012",
  "\256ys\324\355c\344\304\276\222\206\273\265t\205\342\312pu\237ic (\341\216\235",
  "\220\272ish\236\267\375\325\354\372\200\340\365il\254\336\221c\207v\331",
  "duplic\226\200\265t; sam\200\315\277p\346s\236t\345c\331",
  "\273\315\310\223\233\320\357\247\232fa\337\201\246u\200(\341\216\235",
  "m\337\207p\366\042#else\343\336\221c\207v\276\354twe\212 \042#if ... #\212\336f\042\012",
  "\042#elseif\343\336\221c\207\357f\241\355w\205\353\042#else\343\336\221c\207v\331",
  "nu\227\254\302\367\222d\205\364\276\233\327\201\244\200\367\226\225\012",
  "\273\221s\337\201\374\302\367\226\225\230 \376\216\012",
  "\342\266\222g\200\316\326\236\367\226\225\306",
  "\273\315\310\223\202l\223\320\357\247s\203g\366\374(\315%d\235",
  "\273\315\310\223\233\312\247\221f\210\212c\200\315\255\353\307(\315\216\235",
  "\341\342\312bo\373\247\221f\210\212c\200\222\206\353\307(\341\216\235",
  "\274\242\214\344nu\227\254\316ci\224\325\352#p\242g\310\012",
  "\242\214\344nu\227\254\372\310\201\213\221ad\223\326\275\012",
  "\242\214\344nu\227\254supp\225\201wa\205\233\212\263\275\012",
  "\253\210-\326\236\367\226\255\376\232cl\204\236\354\372\200\253\200(\370\230\235",
  "\042\347e\271\343\367\226\255\277\274\325\042\370\343\252\306",
  "\273\315\376\353\307(\315\216\235",
  "#\326\200p\226\350\351\317\231\204\201\345\373\353\213p\320\354\207c \266\322c\350\012",
  "\203pu\201l\203\200\305o l\202\257(aft\254subs\207tu\214s\235",
  "\250n\321x \210r\255\352\244\200\267\375\202\324\255\274\273c\213l\012",
  "m\213\372m\236UTF-8 \212\340d\203g\324\255c\225rupt\236\327le: \211\012",
  "\273\253\276bo\373\042\221turn\343\222\206\042\221tur\351<\246ue>\042\012",
  "\203\313\224\231\212\201\221tur\351typ\276(\307& n\202-\256y\235",
  "\220k\217w\351\252\324\255\233\247\371\201\252 \335",
  "\342\321k\200\247\374a\205\247\232fa\337\201\246u\200f\255\353\203\232x\236\307p\322\311t\254\335",
  "\253\210-\326\236\367\226\225\205\222\206na\207\357\370\205\310\223\233\320\357\323e\306",
  "\247\273\255\341\310\223\202l\223\354l\202\257\305 \247s\203g\366au\305\333\325\335",
  "\323\200\313flict: \202\200\302\244\200\323\276\277\213\221ad\223a\262gn\236\305 a\217\244\254i\365le\234\321\240\335",
  "\217 \323\276\204\200\326\236f\255\300\012",
  "\220k\217w\351au\305\333\202\330",
  "\220k\217w\351\323\200\216 f\255au\305\333\202\330",
  "pu\237ic \304\276\222\206\355c\344\304\276\310\223\233\320\357\323\276\335",
  "\323\200\304\276\310\223\233\312\203i\207\213iz\236\335",
  "pu\237ic \370\205\310\223\233\221tur\351\256y\205\335",
  "a\227i\260ou\205\371t; \374ov\210rid\200\277\221qui\221\206\335",
  "nu\227\254\302\265t\205\364\276\233\362 \326i\214\012",
  "\267pect\236\374nam\200id\212\207\327\210\012",
  "\273\212um\210a\240\221qui\221\205\220iqu\200\321g\012",
  "\342\320\357\221qui\221\206p\322\311\350\205aft\254\356\214\344p\322\311\350\306",
  "\340\337\206\233\272\206\311\227\210\230 \352\231ruc\201\216\012",
  "\300 \364\276\233\320\357\247\362\361typ\331",
  "typ\200\216 sho\337\206\312\216 \352new \232cl\322\214\306",
  "\311\227\210\230 appe\204\205m\225\200\244\353\202c\200\352\231ruc\201\216\012",
  "\273pro\305typ\276\364 \233\362\012",
  "specif\223ei\244\254\213l \336\234\224\202\205\255\202l\223\244\200l\346\201\336\234\224\202\012",
  "\342\272\206%\205\211\012",
  "UNUSED\012",
  "\342\272\206\222\223\311\244od\205f\255\211\012",
  "\342\272\206\311\244o\206\211.\211\012",
  "\342c\213l \311\244od\205\325\353\256y\012",
  "\342c\213l \311\244od\205\325\247\370\012",
  "\311\244o\206\317\320\357\247\327rs\201\315\340\365a\207\237\200\345\373\244\200%\205typ\200(\211\235",
  "%\205nam\200\317\231\204\201\345\373\353upp\210c\346\200let\350\012",
  "%\205\320\205\213\221ad\223\354\212 \326\236a\205\247\211\012",
  "\267pect\236id\212\207\327\254- d\261you \372ge\201\247type?\012"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*120*/  "cannot read from file: \"%s\"\n",
/*121*/  "cannot write to file: \"%s\"\n",
/*122*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*123*/  "insufficient memory\n",
/*124*/  "invalid assembler instruction \"%s\"\n",
/*125*/  "numeric overflow, exceeding capacity\n",
/*126*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*127*/  "too many error messages on one line\n",
/*128*/  "codepage mapping file not found\n",
/*129*/  "invalid path: \"%s\"\n",
/*130*/  "assertion failed: %s\n",
/*131*/  "user error: %s\n",
#else
  "\342\221a\206from \327le\363",
  "\342writ\200\305 \327le\363",
  "t\263\200ov\210f\355w\363",
  "\203suf\327ci\212\201\311m\225y\012",
  "\274\346se\227l\254\203\231ruc\214\330",
  "num\210ic ov\210f\355w\324\267ce\275\361capacity\012",
  "\340\365il\236scrip\201\267ce\275\205\244\200\310ximum \311m\225\223\347\200(%l\206bytes\235",
  "\305o m\222\223\210r\255\311ssag\276\325\202\200l\203\331",
  "\340\232pag\200\310pp\361\327\366\233fo\220d\012",
  "\274p\226h\363",
  "\346s\210\240fail\275: \211\012",
  "\253\254\210r\225: \211\012"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\300 \277tr\243\226\236\305 %\206\266\322c\350\306",
  "\221\326i\240\302\371t/\310cro \335",
  "nu\227\254\302\265t\205\364\276\233\362 \326i\214\012",
  "\252 \277nev\254\253\275\363",
  "\252 \277a\262gn\236\247\246u\200\244a\201\277nev\254\253\275\363",
  "\221d\220d\222\201\340\232: \371\201\267\375\325\277z\210o\012",
  "\221d\220d\222\201te\231: \371\201\267\375\325\277n\202-z\210o\012",
  "\220k\217w\351#p\242g\310\012",
  "\273\345\373\374\221s\337\201\253\236\354\372\200\326i\214\324\372c\361\221p\204s\331",
  "\370\230 sho\337\206\221tur\351\247\246u\331",
  "po\262\237\200\253\200\302\252 \354\372\200\203i\207\213iza\214\363",
  "po\262\237\223\220\203t\212\232\206a\262gn\234t\012",
  "po\262\237\223\220\203t\212\232\206bit\345s\200\367a\214\012",
  "\374mis\362\012",
  "po\262\237\223\247\042\360\343\307\315wa\205\203t\212\232d\363",
  "\267\375\325\320\205\217 effect\012",
  "ne\231\236\340m\234t\012",
  "\355os\200\203d\212\321\214\012",
  "\241\206\231y\366pro\305typ\276\253\236\345\373\356\214\344semic\241umn\306",
  "\355c\344\341\216 s\320\364w\205\247\341a\201\247\316c\275\361level\012",
  "\267\375\325\345\373\374ov\210rid\200\317appe\204 \354twe\212 p\204\212\244ese\306",
  "la\354l nam\200\216 s\320\364w\205\374na\311\012",
  "nu\227\254\302\336git\205\267ce\275\205\242\214\344nu\227\254\316ci\224\202\012",
  "\221d\220d\222\201\042\347e\271\042: \315\347\200\277\213way\2051 \335",
  "\203\232\350m\203\226\200\307\347\200\352\042\347e\271\343\267\375\325\335",
  "\220\221a\266\263\200\340\232\012",
  "\247\341\277a\262gn\236\305 itself \335",
  "m\225\200\203i\207\213iz\210\205\244\353\212um \327eld\306",
  "l\212g\373\302\203i\207\213iz\254\267ce\275\205\347\200\302\244\200\212um \327eld\012",
  "\203\232x \374mis\362 \335",
  "\217 i\365le\234\321\240f\255\323\200\216 \352\370\230\324\217 f\213l-back\012",
  "\323\200speci\327ca\240\325\372w\204\206\232cl\322\240\277ig\217\221d\012",
  "outpu\201\327\366\277writt\212\324bu\201\345\373\340\365ac\201\212\340d\361\336s\263\275\012",
  "\323\200\341\216 s\320\364w\205\247g\355b\344\304\331",
  "\300 \277m\204k\236a\205\232\316c\226\275: \211\012",
  "pu\237ic \273lack\205\372w\204\206\232cl\322\240\335",
  "\220k\217w\351p\322\311t\254\352subs\207tu\240(\203c\225\221c\201#\326\200p\226\350n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
