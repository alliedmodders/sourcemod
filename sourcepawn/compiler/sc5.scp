/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {105,110}, {97,114}, {115,32}, {100,32}, {116,105}, {37,115}, {101,114}, {97,108}, {101,110}, {135,130}, {34,136}, {141,34}, {110,111},
  {114,101}, {117,110}, {97,110}, {121,32}, {111,114}, {115,105}, {97,116}, {115,116}, {32,142}, {109,98}, {100,101}, {143,129}, {109,139}, {41,10}, {101,134}, {140,32},
  {98,108}, {145,99}, {116,104}, {111,108}, {102,161}, {97,32}, {114,97}, {118,138}, {115,121}, {168,153}, {169,163}, {117,115}, {148,32}, {103,32}, {137,32}, {132,166},
  {103,117}, {101,120}, {102,131}, {105,134}, {115,149}, {176,156}, {97,160}, {132,181}, {99,104}, {164,159}, {167,179}, {111,102}, {105,133}, {131,186}, {101,100}, {101,133},
  {170,152}, {99,130}, {118,132}, {187,32}, {105,182}, {194,196}, {116,111}, {171,129}, {115,10}, {175,147}, {154,178}, {109,199}, {109,97}, {116,97}, {109,101}, {98,128},
  {183,129}, {112,144}, {130,32}, {104,97}, {132,97}, {99,146}, {151,150}, {44,32}, {102,105}, {152,10}, {101,10}, {109,150}, {213,155}, {192,157}, {40,221}, {100,105},
  {117,108}, {99,111}, {197,128}, {193,151}, {34,32}, {110,32}, {138,32}, {119,105}, {97,115}, {149,122}, {116,137}, {131,32}, {146,32}, {98,101}, {108,111}, {111,112},
  {118,128}, {136,10}, {102,148}, {205,173}, {131,173}, {219,184}, {58,217}, {100,111}, {109,112}, {108,128}, {239,137}, {164,140}, {227,146}, {162,32}, {209,180}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new declarations\n",
/*099*/  "member \"%s\" appears more than once in struct \"%s\"\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined as a %s\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
#else
  "\261pect\236\306k\213:\230\327bu\201fo\221\206\216\012",
  "\202l\223\245s\203g\371\326e\234\201(\254\261\376\202) \325 f\243\356w ea\270 \042c\350e\042\012",
  "\232cl\324\237\303\245\356c\346\342\313appe\204 \353\245\341\370o\221\206\240ock\012",
  "\373\230 \274\233i\370le\234t\276\012",
  "\271\314\223\233\323\360\267t\310",
  "\313\317a\264gn\236\306 \354\257y\012",
  "\372\226\254\334\317\220\312\276\012",
  "\313\317\245\374\201\261\376\202; \350sum\236z\211o\012",
  "\275\311\351\200(nega\207ve\327z\211o \254ou\201\303bo\221ds\235",
  "\275\271\254\232cl\324\214\012",
  "\275out\225d\200\373\310",
  "\275\271c\212l\327\233\245\272add\220s\310",
  "\217 \213tr\223po\203\201(\217 pu\240ic \373s\235",
  "\275\326e\234t; \233\353s\347t\270\012",
  "\042\232fa\340t\344c\350\200\313\317\242\200l\350\201c\350\200\353s\347t\270 \326e\234t\012",
  "m\340\207p\371\232fa\340t\205\353\042s\347t\270\042\012",
  "\221\312\236\300\012",
  "\203i\207\212iza\237d\226\245\261ce\276\205\232cl\204\236\351\332",
  "\233\245la\355l\366",
  "\275\252 nam\200\216\012",
  "\252 \212\220ad\223\312\276\366",
  "\313\317l\247u\200(n\202-\374t\235",
  "\311a\264gn\234\201\313\317\225\370\371a\264gn\234t\012",
  "\042b\220ak\344\254\042\301t\203ue\344\274ou\201\303\301t\261t\012",
  "\271head\364\337ff\211\205from pro\306typ\332",
  "\217 \365\364\042#if...\042\012",
  "\275\270\324ct\256\374t\012",
  "\275subscrip\201(\233\354\311\254\306o m\222\223subscripts)\366",
  "\275\261\376\202\327\350sum\236z\211o\012",
  "\341\370o\221\206\326e\234\201\233c\356s\236a\201\242\200\213\206\303\330\371(\227\204t\236a\201l\203\200%d\235",
  "\221k\217w\345\337\220c\207v\332",
  "\311\203\232x ou\201\303bo\221d\205(\342\216\235",
  "\311\313\317\203\232x\236(\342\216\235",
  "\320\367\277\233\323\360\245\232fa\340\201\247u\200(\320%d\235",
  "\320typ\200mis\365 (\320%d\235",
  "e\370t\223\326e\234t\012",
  "\275\227r\364(po\264\240\223n\202-\352m\203\226\236\227r\203g\235",
  "\261tr\245\270\324c\352\205\322l\203\332",
  "\374\201\252 \323\205\217 \351\332",
  "duplic\226\200\042c\350e\344la\355l (\247u\200%d\235",
  "\275ellip\225s\327\311\351\200\274\233k\217wn\012",
  "\275\341\231\203a\237\303cl\350\205speci\330\211\310",
  "\270\324ct\256\374\201\261ce\276\205r\222g\200f\254pack\236\227r\203g\012",
  "po\225\214\346p\324\316\352\205\313\321c\276\200\212l nam\236p\324\316\352\310",
  "\306o m\222\223\271\267t\310",
  "\221k\217w\345\311\351\200(\342\216\235",
  "\311\351\277\367 \233\365\327\254\232\227\203a\237\311\274\306o sm\212l\012",
  "\311(\205\367 \233\365\012",
  "\275l\203\200\301t\203ua\214\012",
  "\275r\222g\332",
  "\275subscript\327\253\200\042[ ]\344\372\226\224\205\322\314j\254\337\234\225\202\310",
  "m\340\207-\337\234\225\202\346\257y\205\313\317f\340l\223\203i\207\212iz\276\012",
  "\261ce\276\364\314ximum nu\231\256\303\337\234\225\202\310",
  "\221\365\236c\356s\364b\246c\200(\042}\042\235",
  "\227\204\201\303\271bod\223\347\242ou\201\271head\211\012",
  "\257ys\327\356c\346\305\277\222\206\271\267t\205\334\317pu\240ic (\342\216\235",
  "\221\262ish\236\261\376\322\355\362\200\341\370il\256\337\220c\207v\332",
  "duplic\226\200\267t; sam\200\320\274p\350s\236t\347c\332",
  "\271\320\314\223\233\323\360\245\232fa\340\201\247u\200(\342\216\235",
  "m\340\207p\371\042#else\344\337\220c\207v\277\355twe\213 \042#if ... #\213\337f\042\012",
  "\042#elseif\344\337\220c\207\360f\243\356w\205\354\042#else\344\337\220c\207v\332",
  "nu\231\256\303\372\222d\205\367\277\233\330\201\242\200\372\226\224\012",
  "\271\220s\340\201\363\303\372\226\224\230 \313\317\216\012",
  "\334\270\222g\200\321\312\236\372\226\224\310",
  "\271\320\314\223\202l\223\323\360\245s\203g\371\363(\320%d\235",
  "\271\320\314\223\233\317\245\220f\211\213c\200\320\254\354\311(\320\216\235",
  "\342\334\317bo\375\245\220f\211\213c\200\222\206\354\311(\342\216\235",
  "\275\246\214\346nu\231\256\321ci\225\322\353#p\246g\314\012",
  "\246\214\346nu\231\256\362\314\201\212\220ad\223\312\276\012",
  "\246\214\346nu\231\256supp\224\201wa\205\233\213\266\276\012",
  "\253\211-\312\236\372\226\254\313\317\232cl\204\236\355\362\200\253\200(\373\230\235",
  "\042\351e\273\344\372\226\254\274\275\322\042\373\344\252\310",
  "\271\320\313\317\354\311(\320\216\235",
  "#\312\200p\226\352\345\313\227\204\201\347\375\354\212p\323\355\207c \270\324c\352\012",
  "\203pu\201l\203\200\306o l\202\255(aft\256subs\207tu\214s\235",
  "\250n\315x \211r\254\353\242\200\261\376\202\327\254\275\271c\212l\012",
  "m\212\362m\236UTF-8 \213\341d\203g\327\254c\224rupt\236\330le: \361",
  "\271\253\277bo\375\042\220turn\344\222\206\042\220tur\345<\247ue>\042\012",
  "\203\301\225\227\213\201\220tur\345typ\277(\311& n\202-\257y\235",
  "\221k\217w\345\252\327\254\233\245\374\201\252 \336",
  "\334\315k\200\245\363a\205\245\232fa\340\201\247u\200f\254\354\203\232x\236\311p\324\316t\256\336",
  "\253\211-\312\236\372\226\224\205\222\206na\207\360\373\205\314\223\233\323\360\326e\310",
  "\245\271\254\342\314\223\202l\223\355l\202\255\306 \245s\203g\371au\306\333\322\336",
  "\326\200\301flict: \202\200\303\242\200\326\277\274\212\220ad\223a\264gn\236\306 a\217\242\256i\370le\234\315\237\336",
  "\217 \326\277\204\200\312\236f\254\300\012",
  "\221k\217w\345au\306\333\202\331",
  "\221k\217w\345\326\200\216 f\254au\306\333\202\331",
  "pu\240ic \305\277\222\206\356c\346\305\277\314\223\233\323\360\326\277\336",
  "\326\200\305\277\314\223\233\317\203i\207\212iz\236\336",
  "pu\240ic \373\205\314\223\233\220tur\345\257y\205\336",
  "a\231i\260ou\205\374t; \363ov\211rid\200\274\220qui\220\206\336",
  "nu\231\256\303\267t\205\367\277\233\365 \312i\214\012",
  "\261pect\236\363nam\200id\213\207\330\211\012",
  "\271\213um\211a\237\220qui\220\205\221iqu\200\315g\012",
  "\334\323\360\220qui\220\206p\324\316\352\205aft\256\357\214\346p\324\316\352\310",
  "\341\340\206\233\262\206\316\231\211\230 \353\227ruc\201\216\012",
  "\300 \367\277\233\323\360\245\365\364typ\332",
  "typ\200\216 sho\340\206\317\216 \353new \232cl\324\214\310",
  "\316\231\211\230 appe\204\205m\224\200\242\354\202c\200\353\227ruc\201\216\012",
  "\271pro\306typ\277\367 \233\365\012",
  "specif\223ei\242\256\212l \337\234\225\202\205\254\202l\223\242\200l\350\201\337\234\225\202\012",
  "\334\262\206%\205\361",
  "%\205wa\205\212\220ad\223\312\236\322\242\274\361",
  "\334\262\206\222\223\316\242od\205f\254\361",
  "\334\262\206\316\242o\206\210.\361",
  "\334c\212l \316\242od\205\322\354\257y\012",
  "\334c\212l \316\242od\205\322\245\373\012",
  "\316\242o\206\313\323\360\245\330rs\201\320\341\370a\207\240\200\347\375\242\200%\205typ\200(\210\235",
  "%\205nam\200\313\227\204\201\347\375\354upp\211c\350\200let\352\012",
  "%\205\323\205\212\220ad\223\355\213 \312\236a\205\245\361",
  "\261pect\236id\213\207\330\256- d\263you \362ge\201\245type?\012",
  "\343ruct\254\271\313\220tur\345\363\361",
  "\334\312\200\343ruct\254\362\230; \212\220ad\223\261i\227\205a\205\245\361"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*120*/  "cannot read from file: \"%s\"\n",
/*121*/  "cannot write to file: \"%s\"\n",
/*122*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*123*/  "insufficient memory\n",
/*124*/  "invalid assembler instruction \"%s\"\n",
/*125*/  "numeric overflow, exceeding capacity\n",
/*126*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*127*/  "too many error messages on one line\n",
/*128*/  "codepage mapping file not found\n",
/*129*/  "invalid path: \"%s\"\n",
/*130*/  "assertion failed: %s\n",
/*131*/  "user error: %s\n",
#else
  "\334\220a\206from \330le\366",
  "\334writ\200\306 \330le\366",
  "t\266\200ov\211f\356w\366",
  "\203suf\330ci\213\201\316m\224y\012",
  "\275\350se\231l\256\203\227ruc\214\331",
  "num\211ic ov\211f\356w\327\261ce\276\364capacity\012",
  "\341\370il\236scrip\201\261ce\276\205\242\200\314ximum \316m\224\223\351\200(%l\206bytes\235",
  "\306o m\222\223\211r\254\316ssag\277\322\202\200l\203\332",
  "\341\232pag\200\314pp\364\330\371\233fo\221d\012",
  "\275p\226h\366",
  "\350s\211\237fail\276: \361",
  "\253\256\211r\224: \361"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\300 \274tr\241\226\236\306 %\206\270\324c\352\310",
  "\220\312i\237\303\374t/\314cro \336",
  "nu\231\256\303\267t\205\367\277\233\365 \312i\214\012",
  "\252 \274nev\256\253\276\366",
  "\252 \274a\264gn\236\245\247u\200\242a\201\274nev\256\253\276\366",
  "\220d\221d\222\201\341\232: \374\201\261\376\322\274z\211o\012",
  "\220d\221d\222\201te\227: \374\201\261\376\322\274n\202-z\211o\012",
  "\221k\217w\345#p\246g\314\012",
  "\271\347\375\363\220s\340\201\253\236\355\362\200\312i\214\327\362c\364\220p\204s\332",
  "\373\230 sho\340\206\220tur\345\245\247u\332",
  "po\264\240\200\253\200\303\252 \355\362\200\203i\207\212iza\214\366",
  "po\264\240\223\221\203t\213\232\206a\264gn\234t\012",
  "po\264\240\223\221\203t\213\232\206bit\347s\200\372a\214\012",
  "\363mis\365\012",
  "po\264\240\223\245\042\343\344\311\320wa\205\203t\213\232d\366",
  "\261\376\322\323\205\217 effect\012",
  "ne\227\236\341m\234t\012",
  "\356os\200\203d\213\315\214\012",
  "\243\206\227y\371pro\306typ\277\253\236\347\375\357\214\346semic\243umn\310",
  "\356c\346\342\216 s\323\367w\205\245\342a\201\245\321c\276\364level\012",
  "\261\376\322\347\375\363ov\211rid\200\313appe\204 \355twe\213 p\204\213\242ese\310",
  "la\355l nam\200\216 s\323\367w\205\363na\316\012",
  "nu\231\256\303\337git\205\261ce\276\205\246\214\346nu\231\256\321ci\225\202\012",
  "\220d\221d\222\201\042\351e\273\042: \320\351\200\274\212way\2051 \336",
  "\203\232\352m\203\226\200\311\351\200\353\042\351e\273\344\261\376\322\336",
  "\221\220a\270\266\200\341\232\012",
  "\245\342\274a\264gn\236\306 itself \336",
  "m\224\200\203i\207\212iz\211\205\242\354\213um \330eld\310",
  "l\213g\375\303\203i\207\212iz\256\261ce\276\205\351\200\303\242\200\213um \330eld\012",
  "\203\232x \363mis\365 \336",
  "\217 i\370le\234\315\237f\254\326\200\216 \353\373\230\327\217 f\212l-back\012",
  "\326\200speci\330ca\237\322\362w\204\206\232cl\324\237\274ig\217\220d\012",
  "outpu\201\330\371\274writt\213\327bu\201\347\375\341\370ac\201\213\341d\364\337s\266\276\012",
  "\326\200\342\216 s\323\367w\205\245g\356b\346\305\332",
  "\300 \274m\204k\236a\205\232\321c\226\276: \361",
  "pu\240ic \271lack\205\362w\204\206\232cl\324\237\336",
  "\221k\217w\345p\324\316t\256\353subs\207tu\237(\203c\224\220c\201#\312\200p\226\352n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
