/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {105,110}, {97,114}, {115,32}, {100,32}, {116,105}, {101,114}, {37,115}, {97,108}, {101,110}, {135,130}, {34,137}, {141,34}, {110,111},
  {114,101}, {117,110}, {97,110}, {121,32}, {97,116}, {115,105}, {111,114}, {115,116}, {109,98}, {32,142}, {100,101}, {143,129}, {109,139}, {41,10}, {101,134}, {140,32},
  {98,108}, {111,108}, {114,97}, {145,99}, {102,163}, {116,104}, {118,138}, {115,121}, {167,152}, {97,32}, {168,161}, {117,115}, {103,32}, {150,32}, {132,162}, {136,32},
  {99,104}, {103,117}, {115,149}, {177,156}, {97,160}, {132,179}, {101,120}, {102,131}, {105,134}, {166,184}, {101,100}, {111,102}, {164,159}, {131,185}, {101,133}, {105,133},
  {170,153}, {118,132}, {187,32}, {105,180}, {193,195}, {109,101}, {116,111}, {174,147}, {109,97}, {99,130}, {171,129}, {181,129}, {115,10}, {112,144}, {154,183}, {109,202},
  {104,97}, {116,97}, {98,128}, {109,148}, {151,148}, {44,32}, {130,32}, {132,97}, {153,10}, {101,10}, {99,146}, {192,157}, {40,219}, {100,105}, {102,105}, {196,128},
  {218,155}, {34,32}, {138,32}, {117,108}, {99,111}, {97,115}, {149,122}, {116,136}, {110,32}, {146,32}, {131,172}, {211,176}, {98,101}, {119,105}, {108,111}, {111,112},
  {118,128}, {201,151}, {131,32}, {58,216}, {100,111}, {108,128}, {239,136}, {164,140}, {241,146}, {209,172}, {205,178}, {207,210}, {105,99}, {109,112}, {110,117}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "struct requires unique struct name\n",
/*099*/  "member \"%s\" appears more than once in struct \"%s\"\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s %s was already defined\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument exactly matching the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined as a %s\n",
#else
  "\266pect\236\306k\213:\231\325bu\201fo\221\206\216\012",
  "\202l\223\251s\203g\365\324e\234\201(\255\266\372\202) \332 f\241\356w ea\260 \042c\345e\042\012",
  "\232cl\327\237\302\251\356c\342\337\317appe\204 \362\251\344\375o\221\206\240ock\012",
  "\367\231 \277\233i\375le\234t\272\012",
  "\274\310\223\233\320\360\265t\314",
  "\373a\262gn\236\306 \351\256y\012",
  "\366\224\255\340\322\220\316\272\012",
  "\373\251\370\201\266\372\202; \345sum\236z\210o\012",
  "\275\307\346\200(nega\207ve\325z\210o \255ou\201\302bo\221ds\235",
  "\275\274\255\232cl\327\214\012",
  "\275out\225d\200\367\314",
  "\275\274c\212l\325\233\251\271add\220s\314",
  "\217 \213tr\223po\203\201(\217 pu\240\374 \367s\235",
  "\275\324e\234t; \233\362s\355t\260\012",
  "\042\232fa\343t\341c\345\200\373\245\200l\345\201c\345\200\362s\355t\260 \324e\234t\012",
  "m\343\207p\365\232fa\343t\205\362\042s\355t\260\042\012",
  "\221\316\236\300\012",
  "\203i\207\212iza\237d\224\251\266ce\272\205\232cl\204\236\346\331",
  "\233\251la\354l\363",
  "\275\252 nam\200\216\012",
  "\252 \212\220ad\223\316\272\363",
  "\373l\246u\200(n\202-\370t\235",
  "\307a\262gn\234\201\373\225\375\365a\262gn\234t\012",
  "\042b\220ak\341\255\042\311t\203ue\341\277ou\201\302\311t\266t\012",
  "\274head\352\335ff\210\205from pro\306typ\331",
  "\217 \353\352\042#if...\042\012",
  "\275\260\327ct\257\370t\012",
  "\275subscrip\201(\233\351\307\255\306o m\222\223subscripts)\363",
  "\275\266\372\202\325\345sum\236z\210o\012",
  "\344\375o\221\206\324e\234\201\233c\356s\236a\201\245\200\213\206\302\336\365(\227\204t\236a\201l\203\200%d\235",
  "\221k\217w\350\335\220c\207v\331",
  "\307\203\232x ou\201\302bo\221d\205(\337\216\235",
  "\307\373\203\232x\236(\337\216\235",
  "\313\364\276\233\320\360\251\232fa\343\201\246u\200(\313%d\235",
  "\313typ\200mis\353 (\313%d\235",
  "e\375t\223\324e\234t\012",
  "\275\227r\352(po\262\240\223n\202-\347m\203\224\236\227r\203g\235",
  "\266t\242 \260\327c\347\205\326l\203\331",
  "\370\201\252 \320\205\217 \346\331",
  "dupl\374\224\200\042c\345e\341la\354l (\246u\200%d\235",
  "\275ellip\225s\325\307\346\200\277\233k\217wn\012",
  "\275\344\230\203a\237\302cl\345\205speci\336\210\314",
  "\260\327ct\257\370\201\266ce\272\205r\222g\200f\255pack\236\227r\203g\012",
  "po\225\214\342p\327\305\347\205\317\315c\272\200\212l nam\236p\327\305\347\314",
  "\306o m\222\223\274\265t\314",
  "\221k\217w\350\307\346\200(\337\216\235",
  "\307\346\276\364 \233\353\325\255\232\227\203a\237\307\277\306o sm\212l\012",
  "\307(\205\364 \233\353\012",
  "\275l\203\200\311t\203ua\214\012",
  "\275r\222g\331",
  "\275subscript\325\253\200\042[ ]\341\366\224\226\205\326\310j\255\335\234\225\202\314",
  "m\343\207-\335\234\225\202\342\256y\205\373f\343l\223\203i\207\212iz\272\012",
  "\266ce\272\352\310ximum \376\230\257\302\335\234\225\202\314",
  "\221\353\236c\356s\352b\242c\200(\042}\042\235",
  "\227\204\201\302\274bod\223\355\245ou\201\274head\210\012",
  "\256ys\325\356c\342\304\276\222\206\274\265t\205\340\322pu\240\374 (\337\216\235",
  "\221\267ish\236\266\372\326\354f\226\200\344\375il\257\335\220c\207v\331",
  "dupl\374\224\200\265t; sam\200\313\277p\345s\236t\355c\331",
  "\274\313\310\223\233\320\360\251\232fa\343\201\246u\200(\337\216\235",
  "m\343\207p\365\042#else\341\335\220c\207v\276\354twe\213 \042#if ... #\213\335f\042\012",
  "\042#elseif\341\335\220c\207\360f\241\356w\205\351\042#else\341\335\220c\207v\331",
  "\376\230\257\302\366\222d\205\364\276\233\336\201\245\200\366\224\226\012",
  "\274\220s\343\201\371\302\366\224\226\231 \373\216\012",
  "\340\260\222g\200\315\316\236\366\224\226\314",
  "\274\313\310\223\202l\223\320\360\251s\203g\365\371(\313%d\235",
  "\274\313\310\223\233\322\251\220f\210\213c\200\313\255\351\307(\313\216\235",
  "\337\340\322bo\245 \251\220f\210\213c\200\222\206\351\307(\337\216\235",
  "\275\242\214\342\376\230\257\315ci\225\326\362#p\242g\310\012",
  "\242\214\342\376\230\257f\226\310\201\212\220ad\223\316\272\012",
  "\242\214\342\376\230\257supp\226\201wa\205\233\213\264\272\012",
  "\253\210-\316\236\366\224\255\373\232cl\204\236\354f\226\200\253\200(\367\231\235",
  "\042\346e\273\341\366\224\255\277\275\326\042\367\341\252\314",
  "\274\313\373\351\307(\313\216\235",
  "#\316\200p\224\347\350\317\227\204\201\355\245 \351\212p\320\354\207c \260\327c\347\012",
  "\203pu\201l\203\200\306o l\202\254(aft\257subs\207tu\214s\235",
  "\247n\321x \210r\255\362\245\200\266\372\202\325\255\275\274c\212l\012",
  "m\212f\226m\236UTF-8 \213\344d\203g\325\255c\226rupt\236\336le: \211\012",
  "\274\253\276bo\245 \042\220turn\341\222\206\042\220tur\350<\246ue>\042\012",
  "\203\311\225\227\213\201\220tur\350typ\276(\307& n\202-\256y\235",
  "\221k\217w\350\252\325\255\233\251\370\201\252 \334",
  "\340\321k\200\251\371a\205\251\232fa\343\201\246u\200f\255\351\203\232x\236\307p\327\305t\257\334",
  "\253\210-\316\236\366\224\226\205\222\206na\207\360\367\205\310\223\233\320\360\324e\314",
  "\251\274\255\337\310\223\202l\223\354l\202\254\306 \251s\203g\365au\306\323\326\334",
  "\324\200\311fl\374t: \202\200\302\245\200\324\276\277\212\220ad\223a\262gn\236\306 a\217\245\257i\375le\234\321\237\334",
  "\217 \324\276\204\200\316\236f\255\300\012",
  "\221k\217w\350au\306\323\202\330",
  "\221k\217w\350\324\200\216 f\255au\306\323\202\330",
  "pu\240\374 \304\276\222\206\356c\342\304\276\310\223\233\320\360\324\276\334",
  "\324\200\304\276\310\223\233\322\203i\207\212iz\236\334",
  "pu\240\374 \367\205\310\223\233\220tur\350\256y\205\334",
  "a\230i\261ou\205\370t; \371ov\210rid\200\277\220qui\220\206\334",
  "\376\230\257\302\265t\205\364\276\233\353 \316i\214\012",
  "\266pect\236\371nam\200id\213\207\336\210\012",
  "\274\213um\210a\237\220qui\220\205\221iqu\200\321g\012",
  "\340\320\360\220qui\220\206p\327\305\347\205aft\257\357\214\342p\327\305\347\314",
  "\344\343\206\233\267\206\305\230\210\231 \362\227ruc\201\216\012",
  "\300 \364\276\233\320\360\251\353\352typ\331",
  "\227ruc\201\220qui\220\205\221iqu\200\227ruc\201na\305\012",
  "\305\230\210\231 appe\204\205m\226\200\245\351\202c\200\362\227ruc\201\216\012",
  "\274pro\306typ\276\364 \233\353\012",
  "specif\223ei\245\257\212l \335\234\225\202\205\255\202l\223\245\200l\345\201\335\234\225\202\012",
  "\340\267\206%\205\211\012",
  "%\205%\205wa\205\212\220ad\223\316\272\012",
  "\340\267\206\222\223\305\245od\205f\255\211\012",
  "\340\267\206\305\245o\206\211.\211\012",
  "\340c\212l \305\245od\205\326\351\256y\012",
  "\340c\212l \305\245od\205\326\251\367\012",
  "\305\245o\206\317\320\360\251\336rs\201\313\266actl\223\353\352\245\200%\205typ\200(\211\235",
  "%\205nam\200\317\227\204\201\355\245 \351upp\210c\345\200let\347\012",
  "%\205\320\205\212\220ad\223\354\213 \316\236a\205\251\211\012"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*120*/  "cannot read from file: \"%s\"\n",
/*121*/  "cannot write to file: \"%s\"\n",
/*122*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*123*/  "insufficient memory\n",
/*124*/  "invalid assembler instruction \"%s\"\n",
/*125*/  "numeric overflow, exceeding capacity\n",
/*126*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*127*/  "too many error messages on one line\n",
/*128*/  "codepage mapping file not found\n",
/*129*/  "invalid path: \"%s\"\n",
/*130*/  "assertion failed: %s\n",
/*131*/  "user error: %s\n",
#else
  "\340\220a\206from \336le\363",
  "\340writ\200\306 \336le\363",
  "t\264\200ov\210f\356w\363",
  "\203suf\336ci\213\201\305m\226y\012",
  "\275\345se\230l\257\203\227ruc\214\330",
  "\376m\210\374 ov\210f\356w\325\266ce\272\352capacity\012",
  "\344\375il\236scrip\201\266ce\272\205\245\200\310ximum \305m\226\223\346\200(%l\206bytes\235",
  "\306o m\222\223\210r\255\305ssag\276\326\202\200l\203\331",
  "\344\232pag\200\310pp\352\336\365\233fo\221d\012",
  "\275p\224h\363",
  "\345s\210\237fail\272: \211\012",
  "\253\257\210r\226: \211\012"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\300 \277tr\243\224\236\306 %\206\260\327c\347\314",
  "\220\316i\237\302\370t/\310cro \334",
  "\376\230\257\302\265t\205\364\276\233\353 \316i\214\012",
  "\252 \277nev\257\253\272\363",
  "\252 \277a\262gn\236\251\246u\200\245a\201\277nev\257\253\272\363",
  "\220d\221d\222\201\344\232: \370\201\266\372\326\277z\210o\012",
  "\220d\221d\222\201te\227: \370\201\266\372\326\277n\202-z\210o\012",
  "\221k\217w\350#p\242g\310\012",
  "\274\355\245 \371\220s\343\201\253\236\354f\226\200\316i\214\325f\226c\352\220p\204s\331",
  "\367\231 sho\343\206\220tur\350\251\246u\331",
  "po\262\240\200\253\200\302\252 \354f\226\200\203i\207\212iza\214\363",
  "po\262\240\223\221\203t\213\232\206a\262gn\234t\012",
  "po\262\240\223\221\203t\213\232\206bit\355s\200\366a\214\012",
  "\371mis\353\012",
  "po\262\240\223\251\042\361\341\307\313wa\205\203t\213\232d\363",
  "\266\372\326\320\205\217 effect\012",
  "ne\227\236\344m\234t\012",
  "\356os\200\203d\213\321\214\012",
  "\241\206\227y\365pro\306typ\276\253\236\355\245 \357\214\342sem\374\241umn\314",
  "\356c\342\337\216 s\320\364w\205\251\337a\201\251\315c\272\352level\012",
  "\266\372\326\355\245 \371ov\210rid\200\317appe\204 \354twe\213 p\204\213\245ese\314",
  "la\354l nam\200\216 s\320\364w\205\371na\305\012",
  "\376\230\257\302\335git\205\266ce\272\205\242\214\342\376\230\257\315ci\225\202\012",
  "\220d\221d\222\201\042\346e\273\042: \313\346\200\277\212way\2051 \334",
  "\203\232\347m\203\224\200\307\346\200\362\042\346e\273\341\266\372\326\334",
  "\221\220a\260\264\200\344\232\012",
  "\251\337\277a\262gn\236\306 itself \334",
  "m\226\200\203i\207\212iz\210\205\245\351\213um \336eld\314",
  "l\213g\245 \302\203i\207\212iz\257\266ce\272\205\346\200\302\245\200\213um \336eld\012",
  "\203\232x \371mis\353 \334",
  "\217 i\375le\234\321\237f\255\324\200\216 \362\367\231\325\217 f\212l-back\012",
  "\324\200speci\336ca\237\326f\226w\204\206\232cl\327\237\277ig\217\220d\012",
  "outpu\201\336\365\277writt\213\325bu\201\355\245 \344\375ac\201\213\344d\352\335s\264\272\012",
  "\324\200\337\216 s\320\364w\205\251g\356b\342\304\331",
  "\300 \277m\204k\236a\205\232\315c\224\272: \211\012",
  "pu\240\374 \274lack\205f\226w\204\206\232cl\327\237\334",
  "\221k\217w\350p\327\305t\257\362subs\207tu\237(\203c\226\220c\201#\316\200p\224\347n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
