/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {100,32}, {97,114}, {105,110}, {116,105}, {101,114}, {37,115}, {110,111}, {97,110}, {101,110}, {114,101}, {97,108}, {135,130},
  {111,114}, {117,110}, {34,137}, {146,34}, {121,32}, {138,129}, {115,105}, {115,116}, {100,101}, {97,116}, {101,132}, {109,140}, {32,147}, {41,10}, {109,98}, {116,104},
  {114,97}, {117,115}, {144,32}, {98,108}, {145,99}, {101,120}, {164,143}, {102,166}, {97,32}, {116,121}, {118,142}, {111,108}, {169,112}, {99,139}, {173,149}, {115,121},
  {175,158}, {133,160}, {136,32}, {176,171}, {115,10}, {103,32}, {103,117}, {105,132}, {115,150}, {182,155}, {133,185}, {116,111}, {161,129}, {97,163}, {109,188}, {101,131},
  {102,134}, {44,32}, {170,183}, {99,104}, {101,10}, {134,194}, {104,97}, {111,102}, {117,108}, {99,116}, {105,131}, {167,32}, {98,128}, {97,143}, {177,148}, {109,97},
  {101,100}, {165,112}, {99,130}, {37,131}, {118,133}, {179,156}, {110,32}, {199,32}, {105,189}, {212,216}, {109,101}, {99,111}, {111,112}, {137,10}, {130,32}, {99,108},
  {118,128}, {186,129}, {152,192}, {102,105}, {172,128}, {220,136}, {116,97}, {100,105}, {119,105}, {97,115}, {108,128}, {97,131}, {156,10}, {109,153}, {151,153}, {217,128},
  {213,157}, {198,224}, {40,240}, {150,122}, {210,151}, {34,32}, {138,32}, {139,32}, {142,32}, {159,32}, {110,97}, {115,101}, {116,117}, {139,132}, {209,141}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method or property %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style type declarations\n",
/*121*/  "cannot specify array dimensions on both type and name\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
/*124*/  "unexpected token, expected method or property\n",
/*125*/  "expected \"native\", \"get\", or \"set\"\n",
/*126*/  "%s for %s already exists\n",
/*127*/  "property getters cannot accept extra arguments\n",
/*128*/  "%s must have the same return type as property %s (%s)\n",
/*129*/  "cannot mix methodmaps and classes with inheritance\n",
/*130*/  "cannot coerce functions to values\n",
/*131*/  "cannot coerce object type %s to non-object type %s\n",
/*132*/  "cannot coerce non-object type %s to object type %s\n",
/*133*/  "cannot coerce unrelated object types %s and %s\n",
/*134*/  "type mismatch (%s and %s)\n",
/*135*/  "cannot use an object in a multi-tag selector\n",
/*136*/  "arrays are not supported as return types\n",
/*137*/  "cannot mix reference and array types\n",
/*138*/  "const was specified twice\n",
/*139*/  "could not find type \"%s\"\n",
/*140*/  "new-style array types cannot specify dimension sizes as part of their type\n",
/*141*/  "natives, forwards, and public functions cannot return arrays\n",
/*142*/  "invalid type declaration\n",
/*143*/  "new-style declarations should not have \"new\"\n",
/*144*/  "void cannot be used as a variable type\n",
/*145*/  "invalid type expression\n",
/*146*/  "#pragma newdecls must be required or optional\n",
/*147*/  "new-style declarations are required\n",
/*148*/  "cannot assign null to a non-nullable type\n",
/*149*/  "no getter found for property %s\n",
/*150*/  "setter must take exactly one extra argument with type %s\n",
/*151*/  "setter must return void\n",
/*152*/  "no setter found for property %s\n",
#else
  "\321e\311\232\273k\214:\234\301bu\201fo\221\204\223\012",
  "\202l\224\250s\206g\352\356e\233\201(\242\376\270\202) \255 f\253low ea\303 \042c\351e\042\012",
  "\230\337\205\315 \327\250loc\370\357\276appe\205 \206 \250\333mpo\221\204\243ock\012",
  "\247\234 \312\225imple\233t\320\012",
  "\313\317\224\225\361\272t\264",
  "\276\314a\270gn\232\273 \367\261y\012",
  "\345\231\242\256\314\215\342\320\012",
  "\276\314\250\364\213\201\376\270\202; \351sum\232z\210o\012",
  "\305\316\363\200(nega\207ve\301z\210o \242ou\201\327bo\221ds\235",
  "\305\313\242\230\337\205\315\012",
  "\305out\226d\200\247\264",
  "\305\313c\216l\301\225\250\302add\215s\264",
  "\366\214tr\224po\206\201(\366pu\243ic \247s\235",
  "\305\356e\233t; \225\206 s\350t\303\012",
  "\042\230fa\310t\365c\351\200\276\314\237\200l\351\201c\351\200\206 s\350t\303 \356e\233t\012",
  "m\310\207p\352\230fa\310t\203\206 \042s\350t\303\042\012",
  "\221\342\232\325\012",
  "\206i\207\216iz\315 d\231\250\245ce\320\203\230\337\205\232\363\304",
  "\225\250label:\354",
  "\305\263 \372m\200\223\012",
  "\263 \216\215ad\224\342\320:\354",
  "\276\314l\252u\200(n\202-\364\213t\235",
  "\316a\270gn\233\201\276\314\226mp\352a\270gn\233t\012",
  "\042b\215ak\365\242\042\322t\206ue\365\312ou\201\327\322t\245t\012",
  "\313head\206\265\347ff\210\203from pro\273\254\304",
  "\366\355\303\206\265\042#if...\042\012",
  "\305\303\205a\311\262\364\213t\012",
  "\305subscrip\201(\225\367\316\242\273o m\213\224subscripts):\354",
  "\305\376\270\202\301\351sum\232z\210o\012",
  "\333mpo\221\204\356e\233\201\225\337os\232a\201\237\200\214\204\327\343\352(\227\205t\232a\201l\206\200%d\235",
  "\221k\212w\326\347\215c\207v\304",
  "\316\206\230x ou\201\327bo\221d\203(\357\223\235",
  "\316\276\314\206\230x\232(\357\223\235",
  "\341do\277\225\361\250\230fa\310\201\252u\200(\341%d\235",
  "\341\344mis\355\303 (\341%d\235",
  "empt\224\356e\233t\012",
  "\305\227r\206\265(po\270\243\224n\202-t\210m\206\231\232\227r\206g\235",
  "\245t\240 \303\205a\311\210\203\336l\206\304",
  "\364\213\201\263 \306\203\366\363\304",
  "duplic\231\200\042c\351e\365label (\252u\200%d\235",
  "\305ellip\226s\301\316\363\200\312\225k\212wn\012",
  "\305\333\236\206\315 \327\337\351\203speci\343\210\264",
  "\303\205a\311\262\364\213\201\245ce\320\203r\213g\200f\242pack\232\227r\206g\012",
  "po\226\217\370p\205a\332t\210\203\276p\215c\320\200\216l \372m\232p\205a\332t\210\264",
  "\273o m\213\224\313\272t\264",
  "\221k\212w\326\316\363\200(\357\223\235",
  "\316\363\277do \225\355\303\301\242\230\227\206\315 \316\312\273o sm\216l\012",
  "\316(\203do \225\355\303\012",
  "\305l\206\200\322t\206u\315\012",
  "\305r\213g\304",
  "\305subscript\301\241\200\042[ ]\365\345\231\220\203\336\317j\242\347\233\226\202\264",
  "m\310\207-\347\233\226\202\370\261y\203\276\314f\310l\224\206i\207\216iz\320\012",
  "\245ce\320\206\265\317ximum nu\236\262\327\347\233\226\202\264",
  "\221\355\303\232\337os\206\265b\240c\200(\042}\042\235",
  "\227\205\201\327\313bod\224\350\237ou\201\313head\210\012",
  "\261ys\301loc\370\331\277\375\313\272t\203\256\314pu\243ic (\357\223\235",
  "\221\300ish\232\376\270\336bef\220\200\333mpil\262\347\215c\207v\304",
  "duplic\231\200\272t; sam\200\341\312p\351s\232t\350c\304",
  "\313\341\317\224\225\361\250\230fa\310\201\252u\200(\357\223\235",
  "m\310\207p\352\042#el\373\365\347\215c\207v\277betwe\214 \042#if ... #\214\347f\042\012",
  "\042#el\373if\365\347\215c\207\340f\253low\203\367\042#el\373\365\347\215c\207v\304",
  "nu\236\262\327\345\213d\203do\277\225\343\201\237\200\345\231\220\012",
  "\313\215s\310\201\346\265\327\345\231\220\234 \276\314\223\012",
  "\256\303\213g\200p\215\342\232\345\231\220\264",
  "\313\341\317\224\202l\224\361\250s\206g\352\346\265(\341%d\235",
  "\313\341\317\224\225\314\250\215f\210\214c\200\341\242\367\316(\341\223\235",
  "\357\256\314bo\371\250\215f\210\214c\200\375\367\316(\357\223\235",
  "\305\240\217\370nu\236\262p\215ci\226\336\206 #p\240g\317\012",
  "\240\217\370nu\236\262f\220\317\201\216\215ad\224\342\320\012",
  "\240\217\370nu\236\262supp\220\201w\353\225\214\275\320\012",
  "\241\210-\342\232\345\231\242\276\314\230\337\205\232bef\220\200\241\200(\247\234\235",
  "\042\363e\307\365\345\231\242\312\305\336\042\247\365\263\264",
  "\313\341\276\314\367\316(\341\223\235",
  "#\342\200p\231t\210\326\276\227\205\201\350\371\367\216p\306be\207c \303\205a\311\210\012",
  "\206pu\201l\206\200\273o l\202\265(aft\262subs\207\374\217s\235",
  "\257n\346x \210r\242\206 \237\200\376\270\202\301\242\305\313c\216l\012",
  "m\216f\220m\232UTF-8 \214\333d\206g\301\242c\220rupt\232\343le: \335",
  "\313\241\277bo\371\042\215\374rn\365\375\042\215\374r\326<\252ue>\042\012",
  "\206\322\226\227\214\201\215\374r\326\254\277(\316& n\202-\261y\235",
  "\221k\212w\326\263\301\242\225\250\364\213\201\263 \362",
  "\256\346k\200\250\346\265\353\250\230fa\310\201\252u\200f\242\367\206\230x\232\316p\205a\332t\262\362",
  "\241\210-\342\232\345\231\220\203\375\372\207\340\247\203\317\224\225\361\356e\264",
  "\250\313\242\357\317\224\202l\224bel\202\265\273 \250s\206g\352au\273\355\336\362",
  "\356\200\322fli\311: \202\200\327\237\200\356\277\312\216\215ad\224a\270gn\232\273 a\212\237\262imple\233t\315 \362",
  "\366\356\277\205\200\342\232f\242\325\012",
  "\221k\212w\326au\273\355\202\354",
  "\221k\212w\326\356\200\223 f\242au\273\355\202\354",
  "pu\243ic \331\277\375loc\370\331\277\317\224\225\361\356\277\362",
  "\356\200\331\277\317\224\225\314\206i\207\216iz\232\362",
  "pu\243ic \247\203\317\224\225\215\374r\326\261y\203\362",
  "a\236i\266ou\203\364\213t; \346\265ov\210rid\200\312\215qui\215\204\362",
  "nu\236\262\327\272t\203do\277\225\355\303 \342i\217\012",
  "\321e\311\232\346\265\372m\200id\214\207\343\210\012",
  "\313\214um\210\315 \215qui\215\203\221iqu\200\346g\012",
  "\256\361\215qui\215\204p\205a\332t\210\203aft\262\334\217\370p\205a\332t\210\264",
  "\333\310\204\225\300\204\332\236\210\234 \206 \227ruc\201\223\012",
  "\325 do\277\225\361\250\355\303\206\265\254\304",
  "\344\223 sho\310\204\314\223 \206 new-\227y\352\230\337\205\315\264",
  "\323sho\310\204\225\361\367\321lici\201\215\374r\326\254\304",
  "\313pro\273\254\277do \225\355\303\012",
  "specif\224ei\237\262\216l \347\233\226\202\203\242\202l\224\237\200l\351\201\347\233\226\202\012",
  "\256\300\204\323\335",
  "\323w\353\216\215ad\224\342\232\336\237\312\335",
  "\256\300\204\213\224\332\237od\203f\242\335",
  "\256\300\204\332\237o\204\242pr\345t\224\211.\335",
  "\256c\216l \332\237od\203\336\367\261y\012",
  "\256c\216l \332\237od\203\336\250\247\012",
  "\332\237o\204\276\361\250\343rs\201\341\333mpa\207\243\200\350\371\237\200\323\344(\211\235",
  "\323\372m\200\276\227\205\201\350\371\367upp\210c\351\200lett\210\012",
  "\323\306\203\216\215ad\224be\214 \342\232(p\215vio\241l\224\373\214 \353\211\235",
  "\321e\311\232id\214\207\343\262- d\267you f\220ge\201\250\254e?\012",
  "\364ru\311\242\313\276\215\374r\326\346\265\335",
  "\256\342\200\364ru\311\242f\220\234; \216\215ad\224\245i\227\203\353\250\335",
  "miss\206\265\254e\301\242\323\276\361\237\200sam\200\372m\200\353\323\223\012",
  "\256\241\200\230lete\301\323\323\306\203\366\230\227ru\311\220\012",
  "\366\332\237od\317p \242\337\351\203w\353fo\221\204f\242\335",
  "\366\230\227ru\311\242w\353fo\221\204f\242\323\335",
  "\230\227ru\311\220\203\276\314\372\207\340\247\264",
  "\230\227ru\311\220\203\256\361\245t\240 \272t\264",
  "\332\237od\317p \375\337\351\203\226gn\231u\215\203\276\241\200new-\227y\352\344\230\337\205\315\264",
  "\256specif\224\316\347\233\226\202\203\336bo\371\344\375\372m\304",
  "\321e\311\232\344\376\270\202\012",
  "f\310ly-qu\216i\343\232\372m\200\223 \312\273o l\202g\301wo\310\204\314tr\244\231\232\273\354",
  "\221\321e\311\232\273k\214\301\321e\311\232\332\237o\204\242pr\345\251\012",
  "\321e\311\232\042\372\207ve\042\301\042get\042\301\242\042\373t\042\012",
  "\323f\242\323\216\215ad\224\245i\227\264",
  "pr\345t\224gett\210\203\256accep\201\245t\240 \272t\264",
  "\323\276\361\237\200sam\200\215\374r\326\344\353pr\345t\224\323(\211\235",
  "\256mix \332\237od\317p\203\375\337\351s\277\350\371\206h\210it\213c\304",
  "\256\333\210c\200\247\203\273 \252ue\264",
  "\256\333\210c\200objec\201\344\323\273 n\202-objec\201\344\335",
  "\256\333\210c\200n\202-objec\201\344\323\273 objec\201\344\335",
  "\256\333\210c\200\221\215l\231\232objec\201\254\277\323\375\335",
  "\344mis\355\303 (\323\375\211\235",
  "\256\241\200\367objec\201\206 \250m\310\207-\346\265\373le\311\220\012",
  "\261y\203\205\200\225supp\220t\232\353\215\374r\326\254e\264",
  "\256mix \215f\210\214c\200\375\316\254e\264",
  "\322s\201w\353speci\343\232t\350c\304",
  "\333\310\204\225\300\204\344\223\012",
  "new-\227y\352\316\254\277\256specif\224\347\233\226\336\363\277\353p\205\201\327\237eir \254\304",
  "\372\207ves\301f\220w\205ds\301\375pu\243ic \247\203\256\215\374r\326\261y\264",
  "\305\344\230\337\205\315\012",
  "new-\227y\352\230\337\205\315\203sho\310\204\225\361\042new\042\012",
  "vo\267\256\314\241\232\353\250\357\254\304",
  "\305\344\376\270\202\012",
  "#p\240gm\250new\230\337\203\276\314\215qui\215\204\242\334\217\216\012",
  "new-\227y\352\230\337\205\315\203\205\200\215qui\215d\012",
  "\256a\270g\326n\310l \273 \250n\202-n\310l\275\200\254\304",
  "\366gett\262fo\221\204f\242pr\345t\224\335",
  "\373tt\262\276\346k\200\245a\311l\224\202\200\245t\240 \341\350\371\344\335",
  "\373tt\262\276\215\374r\326void\012",
  "\366\373tt\262fo\221\204f\242pr\345t\224\335"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\256\215a\204from \343le:\354",
  "\256writ\200\273 \343le:\354",
  "t\275\200ov\210flow:\354",
  "\206suf\343ci\214\201\332m\220y\012",
  "\305\351\373\236l\262\206\227ruc\217\354",
  "num\210ic ov\210flow\301\245ce\320\206\265capaci\251\012",
  "\333mpil\232scrip\201\245ce\320\203\237\200\317ximum \332m\220\224\363\200(%l\204bytes\235",
  "\273o m\213\224\210r\242\332ssag\277\336\202\200l\206\304",
  "\333\230pag\200\317pp\206\265\343\352\225fo\221d\012",
  "\305p\231h:\354",
  "\351s\210\217 fail\320: \335",
  "\241\262\210r\220: \335"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\325 \312tr\244\231\232\273 %\204\303\205a\311\210\264",
  "\215\342i\217 \327\364\213t/\317cro \362",
  "nu\236\262\327\272t\203do\277\225\355\303 \342i\217\012",
  "\263 \312nev\262\241\320:\354",
  "\263 \312a\270gn\232\250\252u\200\237a\201\312nev\262\241\320:\354",
  "\215d\221d\213\201\333\230: \364\213\201\376\270\336\312z\210o\012",
  "\215d\221d\213\201te\227: \364\213\201\376\270\336\312n\202-z\210o\012",
  "\221k\212w\326#p\240g\317\012",
  "\313\350\371\346\265\215s\310\201\241\232bef\220\200\342i\217\301f\220c\206\265\215p\205s\304",
  "\247\234 sho\310\204\215\374r\326\250\252u\304",
  "po\270\243\200\241\200\327\263 bef\220\200\206i\207\216iz\315:\354",
  "po\270\243\224\221\206t\214\230\204a\270gn\233t\012",
  "po\270\243\224\221\206t\214\230\204bit\350s\200\345\315\012",
  "\346\265mis\355\303\012",
  "po\270\243\224\250\042\364\365\316\341w\353\206t\214\230d:\354",
  "\376\270\336\306\203\366effe\311\012",
  "ne\227\232\333m\233t\012",
  "loos\200\206d\214t\315\012",
  "\253\204\227y\352pro\273\254\277\241\232\350\371\334\217\370\373mic\253umn\264",
  "loc\370\357\223 s\306dow\203\250\357a\201\250p\215c\320\206\265level\012",
  "\376\270\336\350\371\346\265ov\210rid\200\276appe\205 betwe\214 p\205\214\237e\373\264",
  "label \372m\200\223 s\306dow\203\346\265\372m\304",
  "nu\236\262\327\347git\203\245ce\320\203\240\217\370nu\236\262p\215ci\226\202\012",
  "\215d\221d\213\201\042\363e\307\042: \341\363\200\312\216way\2031 \362",
  "\206\230t\210m\206\231\200\316\363\200\206 \042\363e\307\365\376\270\336\362",
  "\221\215a\303\275\200\333\230\012",
  "\250\357\312a\270gn\232\273 it\373lf \362",
  "m\220\200\206i\207\216iz\210\203\237\367\214um \343eld\264",
  "l\214g\371\327\206i\207\216iz\262\245ce\320\203\363\200\327\237\200\214um \343eld\012",
  "\206\230x \346\265mis\355\303 \362",
  "\366imple\233t\315 f\242\356\200\223 \206 \247\234\301\366f\216l-back\012",
  "\356\200speci\343c\315 \336f\220w\205\204\230\337\205\315 \312ig\212\215d\012",
  "outpu\201\343\352\312writt\214\301bu\201\350\371\333mpac\201\214\333d\206\265\347s\275\320\012",
  "\356\200\357\223 s\306dow\203\250glob\370\331\304",
  "\325 \312m\205k\232\353\230p\215c\231\320: \335",
  "pu\243ic \313lack\203f\220w\205\204\230\337\205\315 \362",
  "\221k\212w\326p\205a\332t\262\206 subs\207\374\217 (\206c\220\215c\201#\342\200p\231t\210n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
