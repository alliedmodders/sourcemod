/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {105,110}, {97,114}, {115,32}, {100,32}, {116,105}, {101,114}, {37,115}, {101,110}, {97,108}, {135,130}, {34,137}, {141,34}, {110,111},
  {117,110}, {114,101}, {97,110}, {121,32}, {115,105}, {97,116}, {111,114}, {109,98}, {32,142}, {115,116}, {143,129}, {109,138}, {100,101}, {41,10}, {101,134}, {98,108},
  {140,32}, {111,108}, {114,97}, {144,99}, {116,104}, {102,163}, {118,139}, {115,121}, {167,151}, {97,32}, {168,161}, {117,115}, {150,32}, {132,162}, {103,32}, {136,32},
  {103,117}, {115,148}, {176,155}, {97,159}, {132,178}, {99,104}, {105,134}, {166,182}, {111,102}, {101,120}, {102,131}, {165,160}, {131,183}, {101,100}, {101,133}, {105,133},
  {170,152}, {118,132}, {184,32}, {105,179}, {193,195}, {116,111}, {173,147}, {109,97}, {109,101}, {99,130}, {171,129}, {180,129}, {115,10}, {112,145}, {109,202}, {104,97},
  {116,97}, {98,128}, {153,149}, {44,32}, {130,32}, {156,186}, {132,97}, {152,10}, {101,10}, {99,146}, {109,149}, {192,157}, {40,219}, {100,105}, {102,105}, {99,111},
  {196,128}, {217,154}, {34,32}, {139,32}, {119,105}, {117,108}, {97,115}, {148,122}, {116,136}, {110,32}, {146,32}, {98,101}, {108,111}, {111,112}, {118,128}, {201,153},
  {131,32}, {131,174}, {218,181}, {58,215}, {100,111}, {109,112}, {108,128}, {237,136}, {165,140}, {239,146}, {164,32}, {208,174}, {205,177}, {206,209}, {105,99}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "UNUSED\n",
/*099*/  "member \"%s\" appears more than once in struct \"%s\"\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "UNUSED\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined as a %s\n",
#else
  "\271pect\236\305k\212:\230\323bu\201fo\220\206\216\012",
  "\202l\223\251s\203g\366\322e\233\201(\254\271\374\202) \331 f\241\354w ea\265 \042c\346e\042\012",
  "\234cl\326\240\302\251\354c\343\340\316appe\204 \360\251\337\365o\220\206\237ock\012",
  "\370\230 \277\232i\365le\233t\275\012",
  "\273\307\223\232\317\356\264t\314",
  "\375a\261gn\236\305 \352\255y\012",
  "\367\225\254\341\321\221\325\275\012",
  "\375\251\371\201\271\374\202; \346sum\236z\210o\012",
  "\274\306\347\200(nega\207ve\323z\210o \254ou\201\302bo\220ds\235",
  "\274\273\254\234cl\326\214\012",
  "\274out\224d\200\370\314",
  "\274\273c\213l\323\232\251\267add\221s\314",
  "\217 \212tr\223po\203\201(\217 pu\237\376 \370s\235",
  "\274\322e\233t; \232\360s\344t\265\012",
  "\042\234fa\345t\342c\346\200\375\244\200l\346\201c\346\200\360s\344t\265 \322e\233t\012",
  "m\345\207p\366\234fa\345t\205\360\042s\344t\265\042\012",
  "\220\325\236\300\012",
  "\203i\207\213iza\240d\225\251\271ce\275\205\234cl\204\236\347\330",
  "\232\251la\353l\363",
  "\274\252 nam\200\216\012",
  "\252 \213\221ad\223\325\275\363",
  "\375l\246u\200(n\202-\371t\235",
  "\306a\261gn\233\201\375\224\365\366a\261gn\233t\012",
  "\042b\221ak\342\254\042\311t\203ue\342\277ou\201\302\311t\271t\012",
  "\273head\361\335ff\210\205from pro\305typ\330",
  "\217 \362\361\042#if...\042\012",
  "\274\265\326ct\257\371t\012",
  "\274subscrip\201(\232\352\306\254\305o m\222\223subscripts)\363",
  "\274\271\374\202\323\346sum\236z\210o\012",
  "\337\365o\220\206\322e\233\201\232c\354s\236a\201\244\200\212\206\302\336\366(\231\204t\236a\201l\203\200%d\235",
  "\220k\217w\351\335\221c\207v\330",
  "\306\203\234x ou\201\302bo\220d\205(\340\216\235",
  "\306\375\203\234x\236(\340\216\235",
  "\313\364\276\232\317\356\251\234fa\345\201\246u\200(\313%d\235",
  "\313typ\200mis\362 (\313%d\235",
  "e\365t\223\322e\233t\012",
  "\274\231r\361(po\261\237\223n\202-\350m\203\225\236\231r\203g\235",
  "\271t\242 \265\326c\350\205\324l\203\330",
  "\371\201\252 \317\205\217 \347\330",
  "dupl\376\225\200\042c\346e\342la\353l (\246u\200%d\235",
  "\274ellip\224s\323\306\347\200\277\232k\217wn\012",
  "\274\337\227\203a\240\302cl\346\205speci\336\210\314",
  "\265\326ct\257\371\201\271ce\275\205r\222g\200f\254pack\236\231r\203g\012",
  "po\224\214\343p\326\310\350\205\316\315c\275\200\213l nam\236p\326\310\350\314",
  "\305o m\222\223\273\264t\314",
  "\220k\217w\351\306\347\200(\340\216\235",
  "\306\347\276\364 \232\362\323\254\234\231\203a\240\306\277\305o sm\213l\012",
  "\306(\205\364 \232\362\012",
  "\274l\203\200\311t\203ua\214\012",
  "\274r\222g\330",
  "\274subscript\323\253\200\042[ ]\342\367\225\226\205\324\307j\254\335\233\224\202\314",
  "m\345\207-\335\233\224\202\343\255y\205\375f\345l\223\203i\207\213iz\275\012",
  "\271ce\275\361\307ximum nu\227\257\302\335\233\224\202\314",
  "\220\362\236c\354s\361b\242c\200(\042}\042\235",
  "\231\204\201\302\273bod\223\344\244ou\201\273head\210\012",
  "\255ys\323\354c\343\304\276\222\206\273\264t\205\341\321pu\237\376 (\340\216\235",
  "\220\272ish\236\271\374\324\353f\226\200\337\365il\257\335\221c\207v\330",
  "dupl\376\225\200\264t; sam\200\313\277p\346s\236t\344c\330",
  "\273\313\307\223\232\317\356\251\234fa\345\201\246u\200(\340\216\235",
  "m\345\207p\366\042#else\342\335\221c\207v\276\353twe\212 \042#if ... #\212\335f\042\012",
  "\042#elseif\342\335\221c\207\356f\241\354w\205\352\042#else\342\335\221c\207v\330",
  "nu\227\257\302\367\222d\205\364\276\232\336\201\244\200\367\225\226\012",
  "\273\221s\345\201\373\302\367\225\226\230 \375\216\012",
  "\341\265\222g\200\315\325\236\367\225\226\314",
  "\273\313\307\223\202l\223\317\356\251s\203g\366\373(\313%d\235",
  "\273\313\307\223\232\321\251\221f\210\212c\200\313\254\352\306(\313\216\235",
  "\340\341\321bo\372\251\221f\210\212c\200\222\206\352\306(\340\216\235",
  "\274\242\214\343nu\227\257\315ci\224\324\360#p\242g\307\012",
  "\242\214\343nu\227\257f\226\307\201\213\221ad\223\325\275\012",
  "\242\214\343nu\227\257supp\226\201wa\205\232\212\263\275\012",
  "\253\210-\325\236\367\225\254\375\234cl\204\236\353f\226\200\253\200(\370\230\235",
  "\042\347e\270\342\367\225\254\277\274\324\042\370\342\252\314",
  "\273\313\375\352\306(\313\216\235",
  "#\325\200p\225\350\351\316\231\204\201\344\372\352\213p\317\353\207c \265\326c\350\012",
  "\203pu\201l\203\200\305o l\202\256(aft\257subs\207tu\214s\235",
  "\247n\320x \210r\254\360\244\200\271\374\202\323\254\274\273c\213l\012",
  "m\213f\226m\236UTF-8 \212\337d\203g\323\254c\226rupt\236\336le: \211\012",
  "\273\253\276bo\372\042\221turn\342\222\206\042\221tur\351<\246ue>\042\012",
  "\203\311\224\231\212\201\221tur\351typ\276(\306& n\202-\255y\235",
  "\220k\217w\351\252\323\254\232\251\371\201\252 \334",
  "\341\320k\200\251\373a\205\251\234fa\345\201\246u\200f\254\352\203\234x\236\306p\326\310t\257\334",
  "\253\210-\325\236\367\225\226\205\222\206na\207\356\370\205\307\223\232\317\356\322e\314",
  "\251\273\254\340\307\223\202l\223\353l\202\256\305 \251s\203g\366au\305\332\324\334",
  "\322\200\311fl\376t: \202\200\302\244\200\322\276\277\213\221ad\223a\261gn\236\305 a\217\244\257i\365le\233\320\240\334",
  "\217 \322\276\204\200\325\236f\254\300\012",
  "\220k\217w\351au\305\332\202\327",
  "\220k\217w\351\322\200\216 f\254au\305\332\202\327",
  "pu\237\376 \304\276\222\206\354c\343\304\276\307\223\232\317\356\322\276\334",
  "\322\200\304\276\307\223\232\321\203i\207\213iz\236\334",
  "pu\237\376 \370\205\307\223\232\221tur\351\255y\205\334",
  "a\227i\260ou\205\371t; \373ov\210rid\200\277\221qui\221\206\334",
  "nu\227\257\302\264t\205\364\276\232\362 \325i\214\012",
  "\271pect\236\373nam\200id\212\207\336\210\012",
  "\273\212um\210a\240\221qui\221\205\220iqu\200\320g\012",
  "\341\317\356\221qui\221\206p\326\310\350\205aft\257\355\214\343p\326\310\350\314",
  "\337\345\206\232\272\206\310\227\210\230 \360\231ruc\201\216\012",
  "\300 \364\276\232\317\356\251\362\361typ\330",
  "UNUSED\012",
  "\310\227\210\230 appe\204\205m\226\200\244\352\202c\200\360\231ruc\201\216\012",
  "\273pro\305typ\276\364 \232\362\012",
  "specif\223ei\244\257\213l \335\233\224\202\205\254\202l\223\244\200l\346\201\335\233\224\202\012",
  "\341\272\206%\205\211\012",
  "UNUSED\012",
  "\341\272\206\222\223\310\244od\205f\254\211\012",
  "\341\272\206\310\244o\206\211.\211\012",
  "\341c\213l \310\244od\205\324\352\255y\012",
  "\341c\213l \310\244od\205\324\251\370\012",
  "\310\244o\206\316\317\356\251\336rs\201\313\337\365a\207\237\200\344\372\244\200%\205typ\200(\211\235",
  "%\205nam\200\316\231\204\201\344\372\352upp\210c\346\200let\350\012",
  "%\205\317\205\213\221ad\223\353\212 \325\236a\205\251\211\012"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*120*/  "cannot read from file: \"%s\"\n",
/*121*/  "cannot write to file: \"%s\"\n",
/*122*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*123*/  "insufficient memory\n",
/*124*/  "invalid assembler instruction \"%s\"\n",
/*125*/  "numeric overflow, exceeding capacity\n",
/*126*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*127*/  "too many error messages on one line\n",
/*128*/  "codepage mapping file not found\n",
/*129*/  "invalid path: \"%s\"\n",
/*130*/  "assertion failed: %s\n",
/*131*/  "user error: %s\n",
#else
  "\341\221a\206from \336le\363",
  "\341writ\200\305 \336le\363",
  "t\263\200ov\210f\354w\363",
  "\203suf\336ci\212\201\310m\226y\012",
  "\274\346se\227l\257\203\231ruc\214\327",
  "num\210\376 ov\210f\354w\323\271ce\275\361capacity\012",
  "\337\365il\236scrip\201\271ce\275\205\244\200\307ximum \310m\226\223\347\200(%l\206bytes\235",
  "\305o m\222\223\210r\254\310ssag\276\324\202\200l\203\330",
  "\337\234pag\200\307pp\361\336\366\232fo\220d\012",
  "\274p\225h\363",
  "\346s\210\240fail\275: \211\012",
  "\253\257\210r\226: \211\012"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\300 \277tr\243\225\236\305 %\206\265\326c\350\314",
  "\221\325i\240\302\371t/\307cro \334",
  "nu\227\257\302\264t\205\364\276\232\362 \325i\214\012",
  "\252 \277nev\257\253\275\363",
  "\252 \277a\261gn\236\251\246u\200\244a\201\277nev\257\253\275\363",
  "\221d\220d\222\201\337\234: \371\201\271\374\324\277z\210o\012",
  "\221d\220d\222\201te\231: \371\201\271\374\324\277n\202-z\210o\012",
  "\220k\217w\351#p\242g\307\012",
  "\273\344\372\373\221s\345\201\253\236\353f\226\200\325i\214\323f\226c\361\221p\204s\330",
  "\370\230 sho\345\206\221tur\351\251\246u\330",
  "po\261\237\200\253\200\302\252 \353f\226\200\203i\207\213iza\214\363",
  "po\261\237\223\220\203t\212\234\206a\261gn\233t\012",
  "po\261\237\223\220\203t\212\234\206bit\344s\200\367a\214\012",
  "\373mis\362\012",
  "po\261\237\223\251\042\357\342\306\313wa\205\203t\212\234d\363",
  "\271\374\324\317\205\217 effect\012",
  "ne\231\236\337m\233t\012",
  "\354os\200\203d\212\320\214\012",
  "\241\206\231y\366pro\305typ\276\253\236\344\372\355\214\343sem\376\241umn\314",
  "\354c\343\340\216 s\317\364w\205\251\340a\201\251\315c\275\361level\012",
  "\271\374\324\344\372\373ov\210rid\200\316appe\204 \353twe\212 p\204\212\244ese\314",
  "la\353l nam\200\216 s\317\364w\205\373na\310\012",
  "nu\227\257\302\335git\205\271ce\275\205\242\214\343nu\227\257\315ci\224\202\012",
  "\221d\220d\222\201\042\347e\270\042: \313\347\200\277\213way\2051 \334",
  "\203\234\350m\203\225\200\306\347\200\360\042\347e\270\342\271\374\324\334",
  "\220\221a\265\263\200\337\234\012",
  "\251\340\277a\261gn\236\305 itself \334",
  "m\226\200\203i\207\213iz\210\205\244\352\212um \336eld\314",
  "l\212g\372\302\203i\207\213iz\257\271ce\275\205\347\200\302\244\200\212um \336eld\012",
  "\203\234x \373mis\362 \334",
  "\217 i\365le\233\320\240f\254\322\200\216 \360\370\230\323\217 f\213l-back\012",
  "\322\200speci\336ca\240\324f\226w\204\206\234cl\326\240\277ig\217\221d\012",
  "outpu\201\336\366\277writt\212\323bu\201\344\372\337\365ac\201\212\337d\361\335s\263\275\012",
  "\322\200\340\216 s\317\364w\205\251g\354b\343\304\330",
  "\300 \277m\204k\236a\205\234\315c\225\275: \211\012",
  "pu\237\376 \273lack\205f\226w\204\206\234cl\326\240\334",
  "\220k\217w\351p\326\310t\257\360subs\207tu\240(\203c\226\221c\201#\325\200p\225\350n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
