/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {105,110}, {97,114}, {115,32}, {100,32}, {116,105}, {101,114}, {37,115}, {109,101}, {97,108}, {135,130}, {34,137}, {141,34}, {110,111},
  {117,110}, {114,101}, {97,110}, {121,32}, {97,116}, {115,105}, {111,114}, {109,98}, {115,116}, {32,142}, {100,101}, {143,129}, {138,110}, {41,10}, {140,32}, {98,108},
  {116,104}, {111,108}, {114,97}, {144,99}, {101,134}, {102,163}, {118,139}, {115,121}, {167,151}, {168,161}, {97,32}, {117,115}, {103,32}, {150,32}, {132,162}, {136,32},
  {99,104}, {103,117}, {115,149}, {97,159}, {177,156}, {132,180}, {101,110}, {101,120}, {105,134}, {166,184}, {101,100}, {111,102}, {102,131}, {165,158}, {131,185}, {109,97},
  {101,133}, {105,133}, {169,153}, {118,132}, {187,32}, {105,179}, {195,197}, {116,111}, {174,147}, {99,130}, {181,129}, {115,10}, {112,145}, {116,97}, {98,128}, {171,129},
  {109,148}, {152,148}, {44,32}, {130,32}, {154,188}, {109,207}, {104,97}, {132,97}, {153,10}, {101,10}, {99,146}, {194,157}, {40,219}, {100,105}, {102,105}, {198,128},
  {218,155}, {34,32}, {139,32}, {117,108}, {99,111}, {149,122}, {110,32}, {131,172}, {208,176}, {101,108}, {108,111}, {111,112}, {97,115}, {118,128}, {116,136}, {201,152},
  {131,32}, {146,32}, {58,216}, {105,99}, {100,111}, {108,128}, {235,136}, {165,140}, {239,146}, {205,172}, {204,178}, {213,206}, {119,105}, {109,112}, {110,117}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "struct requires unique struct name\n",
/*099*/  "member \"%s\" appears more than once in struct \"%s\"\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find methodmap %s\n",
/*103*/  "methodmap %s was already defined\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument exactly matching the methodmap type (%s)\n",
#else
  "\267pect\244\307k\266:\231\322bu\201fo\220\206\216\012",
  "\202l\223\252s\203g\365\321e\234\201(\255\267\372\202) \332 f\241\352w ea\260 \042c\354e\042\012",
  "\232cl\327\236\304\252\352c\342\337\325appe\204 \360\252\344\375o\220\206\237ock\012",
  "\367\231 \301\233i\375le\234t\272\012",
  "\275\277\223\233\326\355\265t\313",
  "\373a\262gn\244\307 \361\256y\012",
  "\366\224\255\340\316\221\324\272\012",
  "\373\252\370\201\267\372\202; \354su\212\206z\210o\012",
  "\276\310\345\200(nega\207ve\322z\210o \255ou\201\304bo\220ds\235",
  "\276\275\255\232cl\327\214\012",
  "\276out\225d\200\367\313",
  "\276\275c\213l\322\233\252\271add\221s\313",
  "\217 \266tr\223po\203\201(\217 pu\237\363 \367s\235",
  "\276\321e\234t; \233\360s\374t\260\012",
  "\042\232fa\343t\341c\354\200\373\240\200l\354\201c\354\200\360s\374t\260 \321e\234t\012",
  "m\343\207p\365\232fa\343t\205\360\042s\374t\260\042\012",
  "\220\324\244\302\012",
  "\203i\207\213iza\236d\224\252\267ce\272\205\232cl\204\244\345\331",
  "\233\252lab\351\362",
  "\276\251 nam\200\216\012",
  "\251 \213\221ad\223\324\272\362",
  "\373l\246u\200(n\202-\370t\235",
  "\310a\262gn\234\201\373\225\375\365a\262gn\234t\012",
  "\042b\221ak\341\255\042\311t\203ue\341\301ou\201\304\311t\267t\012",
  "\275head\347\335ff\210\205from pro\307typ\331",
  "\217 \350\347\042#if...\042\012",
  "\276\260\327ct\257\370t\012",
  "\276subscrip\201(\233\361\310\255\307o m\222\223subscripts)\362",
  "\276\267\372\202\322\354su\212\206z\210o\012",
  "\344\375o\220\206\321e\234\201\233c\352s\244a\201\240\200\266\206\304\336\365(\230\204t\244a\201l\203\200%d\235",
  "\220k\217w\346\335\221c\207v\331",
  "\310\203\232x ou\201\304bo\220d\205(\337\216\235",
  "\310\373\203\232x\244(\337\216\235",
  "\312\364\300\233\326\355\252\232fa\343\201\246u\200(\312%d\235",
  "\312typ\200mis\350 (\312%d\235",
  "e\375t\223\321e\234t\012",
  "\276\230r\347(po\262\237\223n\202-\356m\203\224\244\230r\203g\235",
  "\267t\242 \260\327c\356\205\323l\203\331",
  "\370\201\251 \326\205\217 \345\331",
  "dupl\363\224\200\042c\354e\341lab\351 (\246u\200%d\235",
  "\276\351lip\225s\322\310\345\200\301\233k\217wn\012",
  "\276\344\227\203a\236\304cl\354\205speci\336\210\313",
  "\260\327ct\257\370\201\267ce\272\205r\222g\200f\255pack\244\230r\203g\012",
  "po\225\214\342p\327\212\356\205\325\314c\272\200\213l na\212\206p\327\212\356\313",
  "\307o m\222\223\275\265t\313",
  "\220k\217w\346\310\345\200(\337\216\235",
  "\310\345\300\364 \233\350\322\255\232\230\203a\236\310\301\307o sm\213l\012",
  "\310(\205\364 \233\350\012",
  "\276l\203\200\311t\203ua\214\012",
  "\276r\222g\331",
  "\276subscript\322\253\200\042[ ]\341\366\224\226\205\323\277j\255\335\234\225\202\313",
  "m\343\207-\335\234\225\202\342\256y\205\373f\343l\223\203i\207\213iz\272\012",
  "\267ce\272\347\277ximum \376\227\257\304\335\234\225\202\313",
  "\220\350\244c\352s\347b\242c\200(\042}\042\235",
  "\230\204\201\304\275bod\223\374\240ou\201\275head\210\012",
  "\256ys\322\352c\342\306\300\222\206\275\265t\205\340\316pu\237\363 (\337\216\235",
  "\220\274ish\244\267\372\323bef\226\200\344\375il\257\335\221c\207v\331",
  "dupl\363\224\200\265t; sam\200\312\301p\354s\244tw\363\331",
  "\275\312\277\223\233\326\355\252\232fa\343\201\246u\200(\337\216\235",
  "m\343\207p\365\042#\351se\341\335\221c\207v\300betwe\266 \042#if ... #\266\335f\042\012",
  "\042#\351seif\341\335\221c\207\355f\241\352w\205\361\042#\351se\341\335\221c\207v\331",
  "\376\227\257\304\366\222d\205\364\300\233\336\201\240\200\366\224\226\012",
  "\275\221s\343\201\371\304\366\224\226\231 \373\216\012",
  "\340\260\222g\200\314\324\244\366\224\226\313",
  "\275\312\277\223\202l\223\326\355\252s\203g\365\371(\312%d\235",
  "\275\312\277\223\233\316\252\221f\210\266c\200\312\255\361\310(\312\216\235",
  "\337\340\316bo\240 \252\221f\210\266c\200\222\206\361\310(\337\216\235",
  "\276\242\214\342\376\227\257\314ci\225\323\360#p\242g\277\012",
  "\242\214\342\376\227\257f\226\277\201\213\221ad\223\324\272\012",
  "\242\214\342\376\227\257supp\226\201wa\205\233\266\263\272\012",
  "\253\210-\324\244\366\224\255\373\232cl\204\244bef\226\200\253\200(\367\231\235",
  "\042\345e\273\341\366\224\255\301\276\323\042\367\341\251\313",
  "\275\312\373\361\310(\312\216\235",
  "#\324\200p\224\356\346\325\230\204\201\374\240 \361\213p\326be\207c \260\327c\356\012",
  "\203pu\201l\203\200\307o l\202\254(aft\257subs\207tu\214s\235",
  "\247n\315x \210r\255\360\240\200\267\372\202\322\255\276\275c\213l\012",
  "m\213f\226\212\206UTF-8 \266\344d\203g\322\255c\226rupt\244\336le: \211\012",
  "\275\253\300bo\240 \042\221turn\341\222\206\042\221tur\346<\246ue>\042\012",
  "\203\311\225\230\266\201\221tur\346typ\300(\310& n\202-\256y\235",
  "\220k\217w\346\251\322\255\233\252\370\201\251 \334",
  "\340\315k\200\252\371a\205\252\232fa\343\201\246u\200f\255\361\203\232x\244\310p\327\212t\257\334",
  "\253\210-\324\244\366\224\226\205\222\206na\207\355\367\205\277\223\233\326\355\321e\313",
  "\252\275\255\337\277\223\202l\223b\351\202\254\307 \252s\203g\365au\307\320\323\334",
  "\321\200\311fl\363t: \202\200\304\240\200\321\300\301\213\221ad\223a\262gn\244\307 a\217\240\257i\375le\234\315\236\334",
  "\217 \321\300\204\200\324\244f\255\302\012",
  "\220k\217w\346au\307\320\202\330",
  "\220k\217w\346\321\200\216 f\255au\307\320\202\330",
  "pu\237\363 \306\300\222\206\352c\342\306\300\277\223\233\326\355\321\300\334",
  "\321\200\306\300\277\223\233\316\203i\207\213iz\244\334",
  "pu\237\363 \367\205\277\223\233\221tur\346\256y\205\334",
  "a\227i\261ou\205\370t; \371ov\210rid\200\301\221qui\221\206\334",
  "\376\227\257\304\265t\205\364\300\233\350 \324i\214\012",
  "\267pect\244\371nam\200i\232n\207\336\210\012",
  "\275\266um\210a\236\221qui\221\205\220iqu\200\315g\012",
  "\340\326\355\221qui\221\206p\327\212\356\205aft\257\353\214\342p\327\212\356\313",
  "\344\343\206\233\274\206\212\227\210\231 \360\230ruc\201\216\012",
  "\302 \364\300\233\326\355\252\350\347typ\331",
  "\230ruc\201\221qui\221\205\220iqu\200\230ruc\201na\212\012",
  "\212\227\210\231 appe\204\205m\226\200\240\361\202c\200\360\230ruc\201\216\012",
  "\275pro\307typ\300\364 \233\350\012",
  "specif\223ei\240\257\213l \335\234\225\202\205\255\202l\223\240\200l\354\201\335\234\225\202\012",
  "\340\274\206\212\240od\277p \211\012",
  "\212\240od\277p %\205wa\205\213\221ad\223\324\272\012",
  "\340\274\206\222\223\212\240od\205f\255\211\012",
  "\340\274\206\212\240o\206\211.\211\012",
  "\340c\213l \212\240od\205\323\361\256y\012",
  "\340c\213l \212\240od\205\323\252\367\012",
  "\212\240o\206\325\326\355\252\336rs\201\312\267actl\223\350\347\240\200\212\240od\277p typ\200(\211\235"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*120*/  "cannot read from file: \"%s\"\n",
/*121*/  "cannot write to file: \"%s\"\n",
/*122*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*123*/  "insufficient memory\n",
/*124*/  "invalid assembler instruction \"%s\"\n",
/*125*/  "numeric overflow, exceeding capacity\n",
/*126*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*127*/  "too many error messages on one line\n",
/*128*/  "codepage mapping file not found\n",
/*129*/  "invalid path: \"%s\"\n",
/*130*/  "assertion failed: %s\n",
/*131*/  "user error: %s\n",
#else
  "\340\221a\206from \336le\362",
  "\340writ\200\307 \336le\362",
  "t\263\200ov\210f\352w\362",
  "\203suf\336ci\266\201\212m\226y\012",
  "\276\354se\227l\257\203\230ruc\214\330",
  "\376m\210\363 ov\210f\352w\322\267ce\272\347capacity\012",
  "\344\375il\244scrip\201\267ce\272\205\240\200\277ximum \212m\226\223\345\200(%l\206bytes\235",
  "\307o m\222\223\210r\255\212ssag\300\323\202\200l\203\331",
  "\344\232pag\200\277pp\347\336\365\233fo\220d\012",
  "\276p\224h\362",
  "\354s\210\236fail\272: \211\012",
  "\253\257\210r\226: \211\012"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\302 \301tr\243\224\244\307 %\206\260\327c\356\313",
  "\221\324i\236\304\370t/\277cro \334",
  "\376\227\257\304\265t\205\364\300\233\350 \324i\214\012",
  "\251 \301nev\257\253\272\362",
  "\251 \301a\262gn\244\252\246u\200\240a\201\301nev\257\253\272\362",
  "\221d\220d\222\201\344\232: \370\201\267\372\323\301z\210o\012",
  "\221d\220d\222\201te\230: \370\201\267\372\323\301n\202-z\210o\012",
  "\220k\217w\346#p\242g\277\012",
  "\275\374\240 \371\221s\343\201\253\244bef\226\200\324i\214\322f\226c\347\221p\204s\331",
  "\367\231 sho\343\206\221tur\346\252\246u\331",
  "po\262\237\200\253\200\304\251 bef\226\200\203i\207\213iza\214\362",
  "po\262\237\223\220\203t\266\232\206a\262gn\234t\012",
  "po\262\237\223\220\203t\266\232\206bit\374s\200\366a\214\012",
  "\371mis\350\012",
  "po\262\237\223\252\042\357\341\310\312wa\205\203t\266\232d\362",
  "\267\372\323\326\205\217 effect\012",
  "ne\230\244\344m\234t\012",
  "\352os\200\203\232n\315\214\012",
  "\241\206\230y\365pro\307typ\300\253\244\374\240 \353\214\342sem\363\241umn\313",
  "\352c\342\337\216 s\326\364w\205\252\337a\201\252\314c\272\347lev\351\012",
  "\267\372\323\374\240 \371ov\210rid\200\325appe\204 betwe\266 p\204\266\240ese\313",
  "lab\351 nam\200\216 s\326\364w\205\371na\212\012",
  "\376\227\257\304\335git\205\267ce\272\205\242\214\342\376\227\257\314ci\225\202\012",
  "\221d\220d\222\201\042\345e\273\042: \312\345\200\301\213way\2051 \334",
  "\203\232\356m\203\224\200\310\345\200\360\042\345e\273\341\267\372\323\334",
  "\220\221a\260\263\200\344\232\012",
  "\252\337\301a\262gn\244\307 its\351f \334",
  "m\226\200\203i\207\213iz\210\205\240\361\266um \336\351d\313",
  "l\266g\240 \304\203i\207\213iz\257\267ce\272\205\345\200\304\240\200\266um \336\351d\012",
  "\203\232x \371mis\350 \334",
  "\217 i\375le\234\315\236f\255\321\200\216 \360\367\231\322\217 f\213l-back\012",
  "\321\200speci\336ca\236\323f\226w\204\206\232cl\327\236\301ig\217\221d\012",
  "outpu\201\336\365\301writt\266\322bu\201\374\240 \344\375ac\201\266\344d\347\335s\263\272\012",
  "\321\200\337\216 s\326\364w\205\252g\352b\342\306\331",
  "\302 \301m\204k\244a\205\232\314c\224\272: \211\012",
  "pu\237\363 \275lack\205f\226w\204\206\232cl\327\236\334",
  "\220k\217w\346p\327\212t\257\360subs\207tu\236(\203c\226\221c\201#\324\200p\224\356n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
