# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os

binary_name = 'v8'

project = SM.HL2Project(builder, 'v8')
project.sources += [
  'DependencyManager.cpp',
  'dll_exports.cpp',
  os.path.join('Require','CurrentDirectoryProvider.cpp'),
  os.path.join('Require','PackageRepositoryProvider.cpp'),
  os.path.join('Require','RequireManager.cpp'),
  'ScriptLoader.cpp',
  'SPAPIPluginContextEmulation.cpp',
  'SPAPIPluginFunctionEmulation.cpp',
  'SPAPIPluginRuntimeEmulation.cpp',
  'V8Manager.cpp',
  'V8ToSPMarshaller.cpp',
]

binary = project.Configure(binary_name,SM.tag) # SM.ExtLibrary(builder, binary_name)
compiler = binary.compiler

compiler.cxxincludes += [
  os.path.join(builder.sourcePath,'public','v8'),
  os.path.join(SM.v8_root,'include')
]

if builder.target_platform == 'linux':
  compiler.postlink += [
	'-lpthread',
    os.path.join(SM.v8_root,'out','ia32.release','obj.target','third_party','icu','libicui18n.a'),
    os.path.join(SM.v8_root,'out','ia32.release','obj.target','third_party','icu','libicuuc.a'),
    os.path.join(SM.v8_root,'out','ia32.release','obj.target','third_party','icu','libicudata.a'),
    os.path.join(SM.v8_root,'out','ia32.release','obj.target','tools','gyp','libv8_base.ia32.a'),
    os.path.join(SM.v8_root,'out','ia32.release','obj.target','tools','gyp','libv8_snapshot.a')
  ]
elif builder.target_platform == 'windows':
  compiler.postlink += [
    'ws2_32.lib',
	'advapi32.lib',
	'winmm.lib',
    os.path.join(SM.v8_root,'build','Release','lib','icui18n.lib'),
    os.path.join(SM.v8_root,'build','Release','lib','icuuc.lib'),
    os.path.join(SM.v8_root,'build','Release','lib','v8_base.ia32.lib'),
    os.path.join(SM.v8_root,'build','Release','lib','v8_snapshot.lib')
  ]

if compiler.cxx.behavior == 'gcc':
  compiler.cxxflags.remove('-fno-exceptions')

SM.binaries += builder.Add(project)

