# vim: set ts=8 sts=2 sw=2 tw=99 et ft=python:
import os

builder.SetBuildFolder('package')

include_folder = builder.AddFolder('include')

def lipo(binaries):
  bins = []
  binPaths = []
  for bin in binaries:
    bins.append(bin.binary)
    binPaths.append(os.path.join(builder.buildPath, bin.binary.path))
  argv = ['lipo', '-create']
  binary = os.path.basename(binPaths[0])
  outputPath = os.path.join(builder.buildPath, builder.buildFolder, outFolder, binary)
  builder.AddCommand(
    argv = argv + binPaths + ['-output', outputPath],
    inputs = bins,
    outputs = [binary],
  )

if builder.host.platform == 'mac' and len(SM.target_archs) > 1:
  lipo(SM.spcomp_bins)
else:
  for bin_task in SM.spcomp_bins:
    if bin_task.target.arch == 'x86_64':
      root, ext = os.path.splitext(os.path.basename(bin_task.binary.path))
      file = root + '64' + ext
      builder.AddCopy(bin_task.binary, file)
    else:
      builder.AddCopy(bin_task.binary, '.')

if SM.use_auto_versioning():
  # Copy version_auto.inc.
  for header in SM.generated_headers:
    if 'version_auto.inc' in header.path:
      builder.AddCopy(header, include_folder)

# Export PDB files. We write to a file in the build folder which is pretty
# verboten, but it's okay if it's in the root since AMBuild will never try
# to rmdir the root.
full_binary_list = SM.spcomp_bins
with open(os.path.join(builder.buildPath, 'pdblog.txt'), 'w') as fp:
  for task in full_binary_list:
    fp.write(task.debug.path + '\n')


# Do all straight-up file copies from the source tree.
def CopyFiles(src, dest, files):
  if not dest:
    dest = src
  for source_file in files:
    source_path = os.path.join(builder.sourcePath, src, source_file)
    builder.AddCopy(source_path, dest)

CopyFiles('plugins/include', include_folder,
  [ 'admin.inc',
    'adminmenu.inc',
    'adt.inc',
    'adt_array.inc',
    'adt_stack.inc',
    'adt_trie.inc',
    'banning.inc',
    'basecomm.inc',
    'bitbuffer.inc',
    'clientprefs.inc',
    'clients.inc',
    'commandfilters.inc',
    'commandline.inc',
    'console.inc',
    'convars.inc',
    'core.inc',
    'cstrike.inc',
    'datapack.inc',
    'dbi.inc',
    'entity.inc',
    'entity_prop_stocks.inc',
    'events.inc',
    'files.inc',
    'float.inc',
    'functions.inc',
    'geoip.inc',
    'halflife.inc',
    'handles.inc',
    'helpers.inc',
    'keyvalues.inc',
    'lang.inc',
    'logging.inc',
    'mapchooser.inc',
    'menus.inc',
    'nextmap.inc',
    'profiler.inc',
    'protobuf.inc',
    'regex.inc',
    'sdkhooks.inc',
    'sdktools.inc',
    'sdktools_client.inc',
    'sdktools_engine.inc',
    'sdktools_variant_t.inc',
    'sdktools_entinput.inc',
    'sdktools_entoutput.inc',
    'sdktools_functions.inc',
    'sdktools_gamerules.inc',
    'sdktools_hooks.inc',
    'sdktools_sound.inc',
    'sdktools_stocks.inc',
    'sdktools_stringtables.inc',
    'sdktools_tempents.inc',
    'sdktools_tempents_stocks.inc',
    'sdktools_trace.inc',
    'sdktools_voice.inc',
    'sorting.inc',
    'sourcemod.inc',
    'string.inc',
    'testing.inc',
    'textparse.inc',
    'tf2.inc',
    'tf2_stocks.inc',
    'timers.inc',
    'topmenus.inc',
    'usermessages.inc',
    'vector.inc',
    'version.inc',
  ]
)

CopyFiles('licenses', '.',
  [ 'GPLv2.txt',
    'GPLv3.txt',
    'LICENSE.txt'
  ]
)

if builder.host.platform == 'windows':
  CopyFiles('tools/batchtool', '.', ['compile.exe'])
else:
  CopyFiles('plugins', '.', ['compile.sh'])
