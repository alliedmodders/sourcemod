"Games"
{
    "#default"
    {
        "Keys"
        {
            "SlapSoundCount"    "6"
            "SlapSound1"        "physics/flesh/vietnam_flesh_impact_bullet1.wav"
            "SlapSound2"        "physics/flesh/vietnam_flesh_impact_bullet2.wav"
            "SlapSound3"        "physics/flesh/vietnam_flesh_impact_bullet3.wav"
            "SlapSound4"        "physics/flesh/vietnam_flesh_impact_bullet4.wav"
            "SlapSound5"        "physics/flesh/vietnam_flesh_impact_bullet5.wav"
            "SlapSound6"        "physics/flesh/vietnam_flesh_impact_bullet6.wav"


            "GameRulesProxy"        "CVietnamGameRulesProxy"
            "GameRulesDataTable"    "vietnam_gamerules"
        }

        "Signatures"
        {
            /* This signature sometimes has multiple matches, but this
             * does not matter as g_pGameRules is involved in all of them.
             * The same g_pGameRules offset applies to each match.
             *
             * Sometimes this block of bytes is at the beginning of the static
             * CreateGameRulesObject function and sometimes it is in the middle
             * of an entirely different function. This depends on the game.
             */
            "CreateGameRulesObject"
            {
                "library"       "server"
                "windows64"     "\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x30\x48\x8B\xF9\x48\x8B\x0D\x2A\x2A\x2A\x2A\x48\x85\xC9"
            }
            "g_pGameRules"
            {
                "library"       "server"
                "linux64"       "@g_pGameRules"
            }
        }
        "Signatures"
        {
            /* CBaseServer object for IServer interface */
            "sv"
            {
                "library"   "engine"
                "linux64"     "@sv"
            }
        }

        /* General Temp Entities */
        "Offsets"
        {
            /* Offset into CBaseTempEntity signature address */
            "s_pTempEntities"
            {
                "windows64"   "16"
            }
            "GetTEName"
            {
                "windows64"   "4"
            }
            "GetTENext"
            {
                "windows64"   "8"
            }
            "TE_GetServerClass"
            {
                "windows64"   "0"
            }

            /* Offset into IVEngineServer::CreateFakeClient */
            //"sv"
            //{
            //    // "windows64"   "8"
            //}
            /**
             * CBaseClient::SetUserCVar(char  const*,char  const*);
             * linux64 offset straight from VTable dump.
             * windows64 offset is crazy. Found the windows64 SetName function using string "(%d)%-.*s" (aD_S in IDA)
             * Cross referenced back to the vtable and counted manually (SetUserCvar is 1 higher, offsets start from 1)
             */
            "SetUserCvar"
            {
                "linux64"     "69"
                "windows64"   "61"
            }
            /**
             * CBaseClient::SetName(char  const*);
             * linux64 offset straight from VTable dump.
             * Has string "(%d)%-0.*s"
             */
            "SetClientName"
            {
                "linux64"     "68"
                "windows64"   "60"
            }
            /**
             * Offset into CBaseClient - Used by CBaseServer::UpdateUserSettings to determine when changes have been made.
             * Find CBaseClient::UpdateUserSettings (strings "net_maxroutable", "cl_updaterate" etc) and the offset is set to 0 near the end.
             * linux64:   mov     byte ptr [rbx+258h], 0
             * Win64:     mov     byte ptr [rsi+278h], 0
             * In this example, offset is 278h = 632
             * MCV: This has been moved into CBaseClient::UpdateUserSettings(), rest of the details are still relevant.
             */
            "InfoChanged"
            {
                "linux64"      "600"
                "windows64"    "632"
            }
            // "[L0/W0]             L20     W20     CBaseEntity::SetOwnerEntity(CBaseEntity*)",
            "SetOwnerEntity"
            {
                "linux64"     "20"
                "windows64"   "20"
            }
            // "[L0/W0]             L462    W462    CVietnam_Player::GiveNamedItem(char const*,int,bool,bool,Vector const*)",
            "GiveNamedItem"
            {
                "linux64"     "462"
                "windows64"   "462"
            }
            // "[L0/W0]             L305    W304    CBaseCombatCharacter::RemovePlayerItem(CBaseCombatWeapon *)",
            "RemovePlayerItem"
            {
                "linux64"     "305"
                "windows64"   "304"
            }
            // "[L0/W0]             L301    W300    CBaseCombatCharacter::Weapon_GetSlot(int)",
            "Weapon_GetSlot"
            {
                "linux64"     "301"
                "windows64"   "300"
            }
            // "[L0/W0]             L230    W229    CBaseAnimating::Ignite(float,bool,float,bool,CBaseEntity *,string_t)",
            "Ignite"
            {
                "linux64"     "230"
                "windows64"   "229"
            }
            // "[L0/W0]             L233    W232    CBaseAnimating::Extinguish()",
            "Extinguish"
            {
                "linux64"     "233"
                "windows64"   "232"
            }
            // "[L0/W0]             L115    W114    CBaseEntity::Teleport(Vector const*,QAngle const*,Vector const*,bool)",
            "Teleport"
            {
                "linux64"     "115"
                "windows64"   "114"
            }
            // Unsure which of these to use, so let's try the bool bool one first
            // "[L0/W0]             L511    W512    CBasePlayer::CommitSuicide(bool,bool)",
            // "[L0/W0]             L512    W511    CBasePlayer::CommitSuicide(Vector const&,bool,bool)",
            "CommitSuicide"
            {
                "linux64"     "511"
                "windows64"   "512"
            }
            // "[L0/W0]             L141    W140    CBaseEntity::GetVelocity(Vector *,Vector *)",
            "GetVelocity"
            {
                "linux64"     "140"
                "windows64"   "140"
            }
            // "[L0/W0]             L132    W131    CBaseEntity::EyeAngles(void)",
            "EyeAngles"
            {
                "linux64"     "132"
                "windows64"   "131"
            }
            // "[L0/W0]             L42     W41     CBaseEntity::AcceptInput(char const*,CBaseEntity*,CBaseEntity*,variant_t,int)",
            "AcceptInput"
            {
                "linux64"     "42"
                "windows64"   "41"
            }
            // "[L0/W0]             L28     W29     CBaseEntity::SetModel(char const*)",
            "SetEntityModel"
            {
                "linux64"     "28"
                "windows64"   "27"
            }
            // "[L0/W0]             L293    W292    CBaseCombatCharacter::Weapon_Equip(CBaseCombatWeapon *)",
            "WeaponEquip"
            {
                "linux64"     "293"
                "windows64"   "292"
            }
            // "[L0/W0]             L39     W41     CBaseEntity::Activate(void)",
            "Activate"
            {
                "linux64"     "39"
                "windows64"   "41"
            }
            // "[L0/W0]             L482    W482    CBasePlayer::PlayerRunCommand(CUserCmd *,IMoveHelper *)",
            "PlayerRunCmd"
            {
                "linux64"     "482"
                "windows64"   "482"
            }
            // "[L0/W0]             L286    W285    CBaseCombatCharacter::GiveAmmo(int,int,bool)",
            "GiveAmmo"
            {
                "linux64"     "286"
                "windows64"   "285"
            }
            // "[L0/W0]             L224    W223    CBaseAnimating::GetAttachment(int,matrix3x4_t &)",
            "GetAttachment"
            {
                "linux64"     "224"
                "windows64"   "223"
            }
        }
        "Signatures"
        {
            "CBaseTempEntity"
            {
                "library"   "server"
                "windows64"   "\x48\x8D\x05\x2A\x2A\x2A\x2A\x48\x89\x51\x08\x48\x89\x01\x48\x8B\x05"
                "linux64"     "@_ZN15CBaseTempEntityC2EPKc"
            }
            // "NULL entity in global entity list!\n"
            "FindEntityByClassname"
            {
                "library"   "server"
                "windows64"   "\x48\x89\x5C\x24\x08\x48\x89\x74\x24\x10\x57\x48\x83\xEC\x20\x49\x8B\xF0\x48\x8B\xF9\x48\x85\xD2"
                "linux64"     "@_ZN17CGlobalEntityList21FindEntityByClassnameEP11CBaseEntityPKc"
            }
			// const CEntityFactoryDictionary::`vftable'
            "EntityFactory"
            {
                "library"   "server"
                "windows64"   "\x48\x83\xEC\x28\x8B\x2A\x2A\x2A\x82\x00\xA8\x01"
                "linux64"     "@_ZN24CEntityFactoryDictionary14InstallFactoryEP14IEntityFactoryPKc"
            }
            "FireOutput"
            {
                "library"   "server"
                "windows64"   "\x4C\x8B\xDC\x41\x54\x41\x55"
                "linux64"     "@_ZN17CBaseEntityOutput10FireOutputE9variant_tP11CBaseEntityS2_f"
            }
			// Fuction calls between strings "eyes"(1st xref), "chest"(1st xref), "forward"(3rd xref) - CAI_BaseActor::UpdateHeadControl(CAI_BaseActor *this, const Vector *a2, float a3, float a4)
            "LookupAttachment"
            {
                "library"   "server"
                "windows64"   "\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x20\x48\x83\xB9\x38\x06\x00\x00\x00\x48\x8B\xFA\x48\x8B\xD9\x75\x2A\xE8\x2A\x2A\x2A\x2A\x48\x85\xC0\x74\x2A\x48\x8B\xCB\xE8\x2A\x2A\x2A\x2A\x48\x8B\x8B\x38\x06\x00\x00\x48\x85\xC9\x74\x2A\x48\x83\x39\x00\x74\x2A\x48\x8B\xD7\xE8\x2A\x2A\x2A\x2A"
                "linux64"     "@_ZN14CBaseAnimating16LookupAttachmentEPKc"
            }
			// "Index error writing string table baseline"
            "WriteBaselines"
            {
                "library"   "engine"
				// This signature seems to be right, but causes server hangs when player joining it.
                //"windows64"   "\x4C\x8B\xDC\x53\x41\x55\x48\x81\xEC\xF8\x00\x00\x00"
                "linux64"     "@_ZN28CNetworkStringTableContainer14WriteBaselinesEPKcR8bf_writei"
            }
        }
    }
}
