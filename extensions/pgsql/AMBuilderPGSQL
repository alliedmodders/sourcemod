# vim: sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os, platform

# Copy dummy path config file.
src_config_paths = os.path.join(builder.sourcePath, 'extensions', 'pgsql', 'pg_config_paths.h')
dest_config_paths = os.path.normpath(
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'pg_config_paths.h')
)
builder.AddSymlink(src_config_paths, dest_config_paths)

# Define paths to required config files (to be generated)
dest_pgconfig = os.path.normpath(
  os.path.join(SM.pgsql_root, 'src', 'include', 'pg_config.h')
)
dest_pgconfig_ext = os.path.normpath(
  os.path.join(SM.pgsql_root, 'src', 'include', 'pg_config_ext.h')
)
dest_pgconfig_os = os.path.normpath(
  os.path.join(SM.pgsql_root, 'src', 'include', 'pg_config_os.h')
)

# Copy default windows config files.
if builder.target_platform == 'windows':
  src_pgconfig = os.path.normpath(
    os.path.join(SM.pgsql_root, 'src', 'include', 'pg_config.h.win32')
  )
  builder.AddCopy(src_pgconfig, dest_pgconfig)
  
  src_pgconfig_ext = os.path.normpath(
    os.path.join(SM.pgsql_root, 'src', 'include', 'pg_config_ext.h.win32')
  )
  builder.AddCopy(src_pgconfig_ext, dest_pgconfig_ext)
  
  src_pgconfig_os = os.path.normpath(
    os.path.join(SM.pgsql_root, 'src', 'include', 'port', 'win32.h')
  )
  builder.AddCopy(src_pgconfig_os, dest_pgconfig_os)
  
  
elif builder.target_platform == 'linux':
  builder.SetBuildFolder('libpq')

  # Patch postgres' autoconf configure.in file to allow newer autoconf versions
  input_configure_in = os.path.normpath(
    os.path.join(SM.pgsql_root, 'configure.in')
  )
  input_patch_file = os.path.join(builder.sourcePath, 'extensions', 'pgsql', 'configure.in.patch')
  
  output_configure_in = 'configure.in'
  
  patch_argv = [
    'patch',
    '-o',
    output_configure_in,
    '-i',
    input_patch_file,
    input_configure_in
  ]
  
  # Run patch to remove autoconf version check from configure.in in postgresql sourcetree
  _, patch_outputs = builder.AddCommand(
    inputs = [input_configure_in, input_patch_file],
    argv = patch_argv,
    outputs = [output_configure_in]
  )
  
  # Put the patched configure.in file back into the postgres source folder.
  builder.AddCopy(output_configure_in, input_configure_in)
  
  # Switch working directory to postgres source folder
  builder.SetBuildFolder(
    os.path.normpath(SM.pgsql_root)
  )
  
  # Run autoconf 
  output_configure = os.path.normpath(
    os.path.join(SM.pgsql_root, 'configure')
  )
  
  _, autoconf_outputs = builder.AddCommand(
    inputs = [input_configure_in],
	argv = ['autoconf'],
	outputs = [output_configure]
  )
  
  # Run configure
  configure_argv = [
    './configure',
	'--without-readline'
  ]
  
  builder.AddCommand(
    inputs = autoconf_outputs,
	argv = configure_argv,
	outputs = [dest_pgconfig, dest_pgconfig_ext, dest_pgconfig_os]
  )
  
  
  
# Switch working directory back to build folder
builder.SetBuildFolder('libpq')

# Build the libpq static lib
binary = builder.compiler.StaticLibrary('libpq')
binary.compiler.includes += [
  os.path.join(SM.pgsql_root, 'src', 'include'),
  os.path.join(SM.pgsql_root, 'src', 'include', 'port'),
  os.path.join(SM.pgsql_root, 'src', 'port'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq')
]

if builder.target_platform == 'mac':
  binary.compiler.defines += [
    'FRONTEND',
    'UNSAFE_STAT_OK'
  ]
elif builder.target_platform == 'windows':
  binary.compiler.includes += [
    os.path.join(SM.pgsql_root, 'src', 'include', 'port', 'win32'),
    os.path.join(SM.pgsql_root, 'src', 'include', 'port', 'win32_msvc')
  ]
  binary.compiler.defines += [
    'FRONTEND',
    'WIN32',
    '_WINDOWS',
    '_CRT_SECURE_NO_DEPRECATE',
    'ENABLE_THREAD_SAFETY'
  ]
  binary.compiler.cxxflags.append('/nologo')
  binary.compiler.cxxflags.append('/W3')
  binary.compiler.cxxflags.append('/EHsc')
  binary.compiler.cxxflags.append('/O2')
  binary.compiler.cxxflags.append('/MT')

  binary.compiler.postlink += ['kernel32.lib', 'user32.lib', 'advapi32.lib', 'shfolder.lib', 'wsock32.lib', 'ws2_32.lib', 'secur32.lib']
  
  binary.sources += [
    os.path.join(SM.pgsql_root, 'src', 'port', 'getaddrinfo.c'),
    os.path.join(SM.pgsql_root, 'src', 'port', 'inet_aton.c'),
    os.path.join(SM.pgsql_root, 'src', 'port', 'crypt.c'),
    os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'win32.c'),
    #os.path.join(SM.pgsql_root, 'src', 'port', 'win32error.c'),
    os.path.join(SM.pgsql_root, 'src', 'port', 'win32setlocale.c'),
    os.path.join(SM.pgsql_root, 'src', 'port', 'pgsleep.c'),
    os.path.join(SM.pgsql_root, 'src', 'port', 'dirent.c'),
    os.path.join(SM.pgsql_root, 'src', 'port', 'dirmod.c'),
    os.path.join(SM.pgsql_root, 'src', 'port', 'open.c'),
    os.path.join(SM.pgsql_root, 'src', 'port', 'snprintf.c'),
    os.path.join(SM.pgsql_root, 'src', 'common', 'fe_memutils.c'),
    os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'pthread-win32.c')
  ]
elif builder.target_platform == 'linux':
  binary.compiler.defines += [
    'FRONTEND',
    'UNSAFE_STAT_OK',
    '_REENTRANT',
    '_THREAD_SAFE',
    '_POSIX_PTHREAD_SEMANTICS',
    '_GNU_SOURCE',
  ]
  
  binary.compiler.cflags.remove('-Werror')
  binary.compiler.postlink += ['-pthread -lcrypt -lpthread']
  
  binary.sources += [
    os.path.join(SM.pgsql_root, 'src', 'port', 'getpeereid.c'),
  ]

binary.sources += [
  os.path.join(SM.pgsql_root, 'src', 'port', 'pgstrcasecmp.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'pqsignal.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'thread.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'noblock.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'chklocale.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'inet_net_ntop.c'),
  os.path.join(SM.pgsql_root, 'src', 'backend', 'libpq', 'md5.c'),
  os.path.join(SM.pgsql_root, 'src', 'backend', 'libpq', 'ip.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-auth.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-protocol2.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-protocol3.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-connect.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-exec.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-lobj.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-misc.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-print.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-secure.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'libpq-events.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'pqexpbuffer.c'),
  os.path.join(SM.pgsql_root, 'src', 'backend', 'utils', 'mb', 'wchar.c'),
  os.path.join(SM.pgsql_root, 'src', 'backend', 'utils', 'mb', 'encnames.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'strlcpy.c'),
]
rvalue = builder.Add(binary)

