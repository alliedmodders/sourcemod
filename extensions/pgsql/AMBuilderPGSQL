# vim: sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os, platform

builder.SetBuildFolder('libpq')

binary = builder.compiler.StaticLibrary('libpq')
binary.compiler.includes += [
  os.path.join(SM.pgsql_root, 'src', 'include'),
  os.path.join(SM.pgsql_root, 'src', 'include', 'port'),
  os.path.join(SM.pgsql_root, 'src', 'port'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq')
]

if builder.target_platform == 'mac':
  binary.compiler.defines += [
    'FRONTEND',
	'UNSAFE_STAT_OK'
  ]
elif builder.target_platform == 'windows':
  binary.compiler.includes += [
    os.path.join(SM.pgsql_root, 'src', 'include', 'port', 'win32'),
    os.path.join(SM.pgsql_root, 'src', 'include', 'port', 'win32_msvc')
  ]
  binary.compiler.defines += [
    'FRONTEND',
    'WIN32',
    '_WINDOWS',
	'_CRT_SECURE_NO_DEPRECATE',
	'ENABLE_THREAD_SAFETY'
  ]
  binary.compiler.cxxflags.append('/nologo')
  binary.compiler.cxxflags.append('/W3')
  binary.compiler.cxxflags.append('/EHsc')
  binary.compiler.cxxflags.append('/O2')
  binary.compiler.cxxflags.append('/MT')

  binary.compiler.postlink += ['kernel32.lib', 'user32.lib', 'advapi32.lib', 'shfolder.lib', 'wsock32.lib', 'ws2_32.lib', 'secur32.lib']
  
  binary.sources += [
    os.path.join(SM.pgsql_root, 'src', 'port', 'getaddrinfo.c'),
	os.path.join(SM.pgsql_root, 'src', 'port', 'inet_aton.c'),
	os.path.join(SM.pgsql_root, 'src', 'port', 'crypt.c'),
    os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'win32.c'),
	#os.path.join(SM.pgsql_root, 'src', 'port', 'win32error.c'),
    os.path.join(SM.pgsql_root, 'src', 'port', 'win32setlocale.c'),
	os.path.join(SM.pgsql_root, 'src', 'port', 'pgsleep.c'),
	os.path.join(SM.pgsql_root, 'src', 'port', 'dirent.c'),
    os.path.join(SM.pgsql_root, 'src', 'port', 'dirmod.c'),
    os.path.join(SM.pgsql_root, 'src', 'port', 'open.c'),
	os.path.join(SM.pgsql_root, 'src', 'port', 'snprintf.c'),
	os.path.join(SM.pgsql_root, 'src', 'common', 'fe_memutils.c'),
    os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'pthread-win32.c')
  ]
elif builder.target_platform == 'linux':
  binary.compiler.defines += [
    'FRONTEND',
	'UNSAFE_STAT_OK',
	'_REENTRANT',
	'_THREAD_SAFE',
	'_POSIX_PTHREAD_SEMANTICS',
	'_GNU_SOURCE',
  ]
  
  binary.compiler.cflags.remove('-Werror')
  binary.compiler.postlink += ['-pthread -lcrypt -lpthread']
  
  binary.sources += [
	os.path.join(SM.pgsql_root, 'src', 'port', 'getpeereid.c'),
  ]

binary.sources += [
  os.path.join(SM.pgsql_root, 'src', 'port', 'pgstrcasecmp.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'pqsignal.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'thread.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'noblock.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'chklocale.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'inet_net_ntop.c'),
  os.path.join(SM.pgsql_root, 'src', 'backend', 'libpq', 'md5.c'),
  os.path.join(SM.pgsql_root, 'src', 'backend', 'libpq', 'ip.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-auth.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-protocol2.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-protocol3.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-connect.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-exec.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-lobj.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-misc.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-print.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'fe-secure.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'libpq-events.c'),
  os.path.join(SM.pgsql_root, 'src', 'interfaces', 'libpq', 'pqexpbuffer.c'),
  os.path.join(SM.pgsql_root, 'src', 'backend', 'utils', 'mb', 'wchar.c'),
  os.path.join(SM.pgsql_root, 'src', 'backend', 'utils', 'mb', 'encnames.c'),
  os.path.join(SM.pgsql_root, 'src', 'port', 'strlcpy.c'),
]
rvalue = builder.Add(binary)

