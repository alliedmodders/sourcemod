# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

binary = SM.Library(builder, 'sourcemod.logic')
binary.compiler.cxxincludes += [
  builder.sourcePath,
  os.path.join(builder.sourcePath, 'core', 'logic'),
  os.path.join(builder.sourcePath, 'public'),
  os.path.join(builder.sourcePath, 'sourcepawn', 'include'),
  os.path.join(builder.sourcePath, 'public', 'amtl', 'amtl'),
  os.path.join(builder.sourcePath, 'public', 'amtl'),
  os.path.join(SM.mms_root, 'core', 'sourcehook')
]
binary.compiler.defines += [
  'SM_DEFAULT_THREADER',
  'SM_LOGIC'
]
  
if builder.target_platform == 'linux':
  binary.compiler.postlink += ['-lpthread', '-lrt']
elif builder.target_platform == 'mac':
  binary.compiler.cflags += ['-Wno-deprecated-declarations']
  binary.compiler.postlink += ['-framework', 'CoreServices']

if binary.compiler.vendor == 'gcc' or binary.compiler.vendor == 'clang':
  binary.compiler.cxxflags += ['-fno-rtti']
elif binary.compiler.vendor == 'msvc':
  binary.compiler.cxxflags += ['/GR-']

binary.sources += [
  'common_logic.cpp',
  'smn_adt_array.cpp',
  'smn_sorting.cpp',
  'smn_maplists.cpp',
  'adtfactory.cpp',
  'smn_adt_stack.cpp',
  'thread/threadworker.cpp',
  'thread/baseworker.cpp',
  'threadsupport.cpp',
  'smn_float.cpp',
  'textparsers.cpp',
  'smn_textparse.cpp',
  'smn_adt_trie.cpp',
  'smn_functions.cpp',
  'smn_timers.cpp',
  'smn_players.cpp',
  'memoryutils.cpp',
  'smn_admin.cpp',
  'smn_banning.cpp',
  'smn_filesystem.cpp',
  'stringutil.cpp',
  'translator.cpp',
  'phrasecollection.cpp',
  'smn_lang.cpp',
  'smn_string.cpp',
  'smn_handles.cpp',
  'smn_datapacks.cpp',
  'smn_gameconfigs.cpp',
  'smn_fakenatives.cpp',
  'gameconfigs.cpp',
  'sm_crc32.cpp',
  'smn_profiler.cpp',
  'sharesys.cpp',
  'pluginsys.cpp',
  'handlesys.cpp',
  'nativeowner.cpp',
  'extensionsys.cpp',
  'debugreporter.cpp',
  'database.cpp',
  'smn_database.cpp',
  'forwardsys.cpp',
  'admincache.cpp',
  'sm_trie.cpp',
  'smn_console.cpp',
  'profiletools.cpp',
  'logger.cpp',
  'smn_core.cpp',
  'smn_menus.cpp',
  'sprintf.cpp',
  'librarysys.cpp',
  'rootconsolemenu.cpp',
  'cdatapack.cpp',
  'frame_tasks.cpp',
]
if builder.target_platform == 'windows':
  binary.sources += ['thread/winthreads.cpp']
else:
  binary.sources += ['thread/posixthreads.cpp']

SM.binaries += [builder.Add(binary)]
